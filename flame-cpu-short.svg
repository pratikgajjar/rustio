<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="5417"><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (5 samples, 0.09%)</title><rect x="1.4768%" y="309" width="0.0923%" height="15" fill="rgb(227,0,7)" fg:x="80" fg:w="5"/><text x="1.7268%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (2 samples, 0.04%)</title><rect x="1.5691%" y="309" width="0.0369%" height="15" fill="rgb(217,0,24)" fg:x="85" fg:w="2"/><text x="1.8191%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (5 samples, 0.09%)</title><rect x="1.6061%" y="309" width="0.0923%" height="15" fill="rgb(221,193,54)" fg:x="87" fg:w="5"/><text x="1.8561%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (4 samples, 0.07%)</title><rect x="1.6984%" y="309" width="0.0738%" height="15" fill="rgb(248,212,6)" fg:x="92" fg:w="4"/><text x="1.9484%" y="319.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="2.1968%" y="277" width="0.0185%" height="15" fill="rgb(208,68,35)" fg:x="119" fg:w="1"/><text x="2.4468%" y="287.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.07%)</title><rect x="2.1599%" y="293" width="0.0738%" height="15" fill="rgb(232,128,0)" fg:x="117" fg:w="4"/><text x="2.4099%" y="303.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="2.2152%" y="277" width="0.0185%" height="15" fill="rgb(207,160,47)" fg:x="120" fg:w="1"/><text x="2.4652%" y="287.50"></text></g><g><title>__clock_gettime (1 samples, 0.02%)</title><rect x="2.2152%" y="261" width="0.0185%" height="15" fill="rgb(228,23,34)" fg:x="120" fg:w="1"/><text x="2.4652%" y="271.50"></text></g><g><title>tokio::runtime::context::with_defer (20 samples, 0.37%)</title><rect x="2.2337%" y="293" width="0.3692%" height="15" fill="rgb(218,30,26)" fg:x="121" fg:w="20"/><text x="2.4837%" y="303.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.09%)</title><rect x="2.5106%" y="277" width="0.0923%" height="15" fill="rgb(220,122,19)" fg:x="136" fg:w="5"/><text x="2.7606%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (6 samples, 0.11%)</title><rect x="2.6029%" y="293" width="0.1108%" height="15" fill="rgb(250,228,42)" fg:x="141" fg:w="6"/><text x="2.8529%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.07%)</title><rect x="3.5259%" y="277" width="0.0738%" height="15" fill="rgb(240,193,28)" fg:x="191" fg:w="4"/><text x="3.7759%" y="287.50"></text></g><g><title>syscall (2 samples, 0.04%)</title><rect x="3.5629%" y="261" width="0.0369%" height="15" fill="rgb(216,20,37)" fg:x="193" fg:w="2"/><text x="3.8129%" y="271.50"></text></g><g><title>tokio::runtime::driver::Driver::park (2 samples, 0.04%)</title><rect x="3.5998%" y="277" width="0.0369%" height="15" fill="rgb(206,188,39)" fg:x="195" fg:w="2"/><text x="3.8498%" y="287.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (11 samples, 0.20%)</title><rect x="3.9505%" y="261" width="0.2031%" height="15" fill="rgb(217,207,13)" fg:x="214" fg:w="11"/><text x="4.2005%" y="271.50"></text></g><g><title>__clock_gettime (9 samples, 0.17%)</title><rect x="3.9874%" y="245" width="0.1661%" height="15" fill="rgb(231,73,38)" fg:x="216" fg:w="9"/><text x="4.2374%" y="255.50"></text></g><g><title>std::time::Instant::checked_duration_since (25 samples, 0.46%)</title><rect x="4.1536%" y="261" width="0.4615%" height="15" fill="rgb(225,20,46)" fg:x="225" fg:w="25"/><text x="4.4036%" y="271.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (12 samples, 0.22%)</title><rect x="4.3936%" y="245" width="0.2215%" height="15" fill="rgb(210,31,41)" fg:x="238" fg:w="12"/><text x="4.6436%" y="255.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.07%)</title><rect x="4.6151%" y="261" width="0.0738%" height="15" fill="rgb(221,200,47)" fg:x="250" fg:w="4"/><text x="4.8651%" y="271.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (16 samples, 0.30%)</title><rect x="4.6889%" y="261" width="0.2954%" height="15" fill="rgb(226,26,5)" fg:x="254" fg:w="16"/><text x="4.9389%" y="271.50"></text></g><g><title>&lt;&amp;mio::event::events::Events as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.09%)</title><rect x="5.7227%" y="245" width="0.0923%" height="15" fill="rgb(249,33,26)" fg:x="310" fg:w="5"/><text x="5.9727%" y="255.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.17%)</title><rect x="5.8150%" y="245" width="0.1661%" height="15" fill="rgb(235,183,28)" fg:x="315" fg:w="9"/><text x="6.0650%" y="255.50"></text></g><g><title>mio::event::event::Event::is_read_closed (6 samples, 0.11%)</title><rect x="5.9812%" y="245" width="0.1108%" height="15" fill="rgb(221,5,38)" fg:x="324" fg:w="6"/><text x="6.2312%" y="255.50"></text></g><g><title>mio::event::event::Event::is_readable (3 samples, 0.06%)</title><rect x="6.0919%" y="245" width="0.0554%" height="15" fill="rgb(247,18,42)" fg:x="330" fg:w="3"/><text x="6.3419%" y="255.50"></text></g><g><title>mio::event::event::Event::is_writable (4 samples, 0.07%)</title><rect x="6.1473%" y="245" width="0.0738%" height="15" fill="rgb(241,131,45)" fg:x="333" fg:w="4"/><text x="6.3973%" y="255.50"></text></g><g><title>mio::event::event::Event::is_write_closed (2 samples, 0.04%)</title><rect x="6.2212%" y="245" width="0.0369%" height="15" fill="rgb(249,31,29)" fg:x="337" fg:w="2"/><text x="6.4712%" y="255.50"></text></g><g><title>mio::event::event::Event::token (9 samples, 0.17%)</title><rect x="6.2581%" y="245" width="0.1661%" height="15" fill="rgb(225,111,53)" fg:x="339" fg:w="9"/><text x="6.5081%" y="255.50"></text></g><g><title>__libc_disable_asynccancel (2 samples, 0.04%)</title><rect x="7.1073%" y="213" width="0.0369%" height="15" fill="rgb(238,160,17)" fg:x="385" fg:w="2"/><text x="7.3573%" y="223.50"></text></g><g><title>mio::poll::Poll::poll (41 samples, 0.76%)</title><rect x="6.4242%" y="245" width="0.7569%" height="15" fill="rgb(214,148,48)" fg:x="348" fg:w="41"/><text x="6.6742%" y="255.50"></text></g><g><title>epoll_wait (26 samples, 0.48%)</title><rect x="6.7011%" y="229" width="0.4800%" height="15" fill="rgb(232,36,49)" fg:x="363" fg:w="26"/><text x="6.9511%" y="239.50"></text></g><g><title>__libc_enable_asynccancel (2 samples, 0.04%)</title><rect x="7.1442%" y="213" width="0.0369%" height="15" fill="rgb(209,103,24)" fg:x="387" fg:w="2"/><text x="7.3942%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (5 samples, 0.09%)</title><rect x="8.0672%" y="181" width="0.0923%" height="15" fill="rgb(229,88,8)" fg:x="437" fg:w="5"/><text x="8.3172%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (50 samples, 0.92%)</title><rect x="7.7164%" y="213" width="0.9230%" height="15" fill="rgb(213,181,19)" fg:x="418" fg:w="50"/><text x="7.9664%" y="223.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (42 samples, 0.78%)</title><rect x="7.8641%" y="197" width="0.7753%" height="15" fill="rgb(254,191,54)" fg:x="426" fg:w="42"/><text x="8.1141%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (26 samples, 0.48%)</title><rect x="8.1595%" y="181" width="0.4800%" height="15" fill="rgb(241,83,37)" fg:x="442" fg:w="26"/><text x="8.4095%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (10 samples, 0.18%)</title><rect x="8.4549%" y="165" width="0.1846%" height="15" fill="rgb(233,36,39)" fg:x="458" fg:w="10"/><text x="8.7049%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (13 samples, 0.24%)</title><rect x="8.6395%" y="213" width="0.2400%" height="15" fill="rgb(226,3,54)" fg:x="468" fg:w="13"/><text x="8.8895%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (1 samples, 0.02%)</title><rect x="8.8610%" y="197" width="0.0185%" height="15" fill="rgb(245,192,40)" fg:x="480" fg:w="1"/><text x="9.1110%" y="207.50"></text></g><g><title>tokio::runtime::io::Driver::turn (237 samples, 4.38%)</title><rect x="4.9843%" y="261" width="4.3751%" height="15" fill="rgb(238,167,29)" fg:x="270" fg:w="237"/><text x="5.2343%" y="271.50">tokio..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (118 samples, 2.18%)</title><rect x="7.1811%" y="245" width="2.1783%" height="15" fill="rgb(232,182,51)" fg:x="389" fg:w="118"/><text x="7.4311%" y="255.50">t..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (101 samples, 1.86%)</title><rect x="7.4949%" y="229" width="1.8645%" height="15" fill="rgb(231,60,39)" fg:x="406" fg:w="101"/><text x="7.7449%" y="239.50">t..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (26 samples, 0.48%)</title><rect x="8.8795%" y="213" width="0.4800%" height="15" fill="rgb(208,69,12)" fg:x="481" fg:w="26"/><text x="9.1295%" y="223.50"></text></g><g><title>tokio::runtime::signal::Driver::process (7 samples, 0.13%)</title><rect x="9.3594%" y="261" width="0.1292%" height="15" fill="rgb(235,93,37)" fg:x="507" fg:w="7"/><text x="9.6094%" y="271.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (76 samples, 1.40%)</title><rect x="9.4886%" y="261" width="1.4030%" height="15" fill="rgb(213,116,39)" fg:x="514" fg:w="76"/><text x="9.7386%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (36 samples, 0.66%)</title><rect x="10.2271%" y="245" width="0.6646%" height="15" fill="rgb(222,207,29)" fg:x="554" fg:w="36"/><text x="10.4771%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (20 samples, 0.37%)</title><rect x="10.5224%" y="229" width="0.3692%" height="15" fill="rgb(206,96,30)" fg:x="570" fg:w="20"/><text x="10.7724%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (474 samples, 8.75%)</title><rect x="2.7137%" y="293" width="8.7502%" height="15" fill="rgb(218,138,4)" fg:x="147" fg:w="474"/><text x="2.9637%" y="303.50">tokio::runti..</text></g><g><title>tokio::runtime::time::Driver::park_internal (424 samples, 7.83%)</title><rect x="3.6367%" y="277" width="7.8272%" height="15" fill="rgb(250,191,14)" fg:x="197" fg:w="424"/><text x="3.8867%" y="287.50">tokio::runt..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (31 samples, 0.57%)</title><rect x="10.8916%" y="261" width="0.5723%" height="15" fill="rgb(239,60,40)" fg:x="590" fg:w="31"/><text x="11.1416%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (23 samples, 0.42%)</title><rect x="11.0393%" y="245" width="0.4246%" height="15" fill="rgb(206,27,48)" fg:x="598" fg:w="23"/><text x="11.2893%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.04%)</title><rect x="11.4639%" y="293" width="0.0369%" height="15" fill="rgb(225,35,8)" fg:x="621" fg:w="2"/><text x="11.7139%" y="303.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.02%)</title><rect x="11.5193%" y="277" width="0.0185%" height="15" fill="rgb(250,213,24)" fg:x="624" fg:w="1"/><text x="11.7693%" y="287.50"></text></g><g><title>tokio::runtime::io::Driver::turn (1 samples, 0.02%)</title><rect x="11.5378%" y="277" width="0.0185%" height="15" fill="rgb(247,123,22)" fg:x="625" fg:w="1"/><text x="11.7878%" y="287.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="11.5562%" y="277" width="0.0185%" height="15" fill="rgb(231,138,38)" fg:x="626" fg:w="1"/><text x="11.8062%" y="287.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="11.5562%" y="261" width="0.0185%" height="15" fill="rgb(231,145,46)" fg:x="626" fg:w="1"/><text x="11.8062%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.02%)</title><rect x="11.5562%" y="245" width="0.0185%" height="15" fill="rgb(251,118,11)" fg:x="626" fg:w="1"/><text x="11.8062%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (534 samples, 9.86%)</title><rect x="1.7722%" y="309" width="9.8579%" height="15" fill="rgb(217,147,25)" fg:x="96" fg:w="534"/><text x="2.0222%" y="319.50">tokio::runtime..</text></g><g><title>tokio::runtime::time::Driver::park_internal (7 samples, 0.13%)</title><rect x="11.5008%" y="293" width="0.1292%" height="15" fill="rgb(247,81,37)" fg:x="623" fg:w="7"/><text x="11.7508%" y="303.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.06%)</title><rect x="11.5747%" y="277" width="0.0554%" height="15" fill="rgb(209,12,38)" fg:x="627" fg:w="3"/><text x="11.8247%" y="287.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (3 samples, 0.06%)</title><rect x="11.5747%" y="261" width="0.0554%" height="15" fill="rgb(227,1,9)" fg:x="627" fg:w="3"/><text x="11.8247%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="12.8300%" y="277" width="0.0185%" height="15" fill="rgb(248,47,43)" fg:x="695" fg:w="1"/><text x="13.0800%" y="287.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.07%)</title><rect x="12.8115%" y="293" width="0.0738%" height="15" fill="rgb(221,10,30)" fg:x="694" fg:w="4"/><text x="13.0615%" y="303.50"></text></g><g><title>syscall (2 samples, 0.04%)</title><rect x="12.8484%" y="277" width="0.0369%" height="15" fill="rgb(210,229,1)" fg:x="696" fg:w="2"/><text x="13.0984%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1 samples, 0.02%)</title><rect x="12.8854%" y="293" width="0.0185%" height="15" fill="rgb(222,148,37)" fg:x="698" fg:w="1"/><text x="13.1354%" y="303.50"></text></g><g><title>hyper::common::date::CACHED::__getit (9 samples, 0.17%)</title><rect x="14.9898%" y="197" width="0.1661%" height="15" fill="rgb(234,67,33)" fg:x="812" fg:w="9"/><text x="15.2398%" y="207.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (19 samples, 0.35%)</title><rect x="15.2483%" y="181" width="0.3507%" height="15" fill="rgb(247,98,35)" fg:x="826" fg:w="19"/><text x="15.4983%" y="191.50"></text></g><g><title>__clock_gettime (16 samples, 0.30%)</title><rect x="15.3037%" y="165" width="0.2954%" height="15" fill="rgb(247,138,52)" fg:x="829" fg:w="16"/><text x="15.5537%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::update_date (55 samples, 1.02%)</title><rect x="14.8052%" y="213" width="1.0153%" height="15" fill="rgb(213,79,30)" fg:x="802" fg:w="55"/><text x="15.0552%" y="223.50"></text></g><g><title>hyper::common::date::CachedDate::check (36 samples, 0.66%)</title><rect x="15.1560%" y="197" width="0.6646%" height="15" fill="rgb(246,177,23)" fg:x="821" fg:w="36"/><text x="15.4060%" y="207.50"></text></g><g><title>std::time::SystemTime::now (12 samples, 0.22%)</title><rect x="15.5990%" y="181" width="0.2215%" height="15" fill="rgb(230,62,27)" fg:x="845" fg:w="12"/><text x="15.8490%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::State::is_read_closed (3 samples, 0.06%)</title><rect x="15.8206%" y="213" width="0.0554%" height="15" fill="rgb(216,154,8)" fg:x="857" fg:w="3"/><text x="16.0706%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::State::is_write_closed (10 samples, 0.18%)</title><rect x="15.8759%" y="213" width="0.1846%" height="15" fill="rgb(244,35,45)" fg:x="860" fg:w="10"/><text x="16.1259%" y="223.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.09%)</title><rect x="18.9219%" y="197" width="0.0923%" height="15" fill="rgb(251,115,12)" fg:x="1025" fg:w="5"/><text x="19.1719%" y="207.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::is_end_stream (3 samples, 0.06%)</title><rect x="19.0142%" y="197" width="0.0554%" height="15" fill="rgb(240,54,50)" fg:x="1030" fg:w="3"/><text x="19.2642%" y="207.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (6 samples, 0.11%)</title><rect x="19.0696%" y="197" width="0.1108%" height="15" fill="rgb(233,84,52)" fg:x="1033" fg:w="6"/><text x="19.3196%" y="207.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::size_hint (4 samples, 0.07%)</title><rect x="19.1804%" y="197" width="0.0738%" height="15" fill="rgb(207,117,47)" fg:x="1039" fg:w="4"/><text x="19.4304%" y="207.50"></text></g><g><title>&lt;T as tower::util::boxed_clone::CloneService&lt;R&gt;&gt;::clone_box (15 samples, 0.28%)</title><rect x="22.1340%" y="149" width="0.2769%" height="15" fill="rgb(249,43,39)" fg:x="1199" fg:w="15"/><text x="22.3840%" y="159.50"></text></g><g><title>__memcpy_ssse3 (2 samples, 0.04%)</title><rect x="22.6140%" y="133" width="0.0369%" height="15" fill="rgb(209,38,44)" fg:x="1225" fg:w="2"/><text x="22.8640%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="22.6509%" y="133" width="0.0185%" height="15" fill="rgb(236,212,23)" fg:x="1227" fg:w="1"/><text x="22.9009%" y="143.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="22.6694%" y="133" width="0.0185%" height="15" fill="rgb(242,79,21)" fg:x="1228" fg:w="1"/><text x="22.9194%" y="143.50"></text></g><g><title>&lt;axum::routing::method_routing::MethodRouter&lt;S,B,E&gt; as core::clone::Clone&gt;::clone (66 samples, 1.22%)</title><rect x="21.5064%" y="165" width="1.2184%" height="15" fill="rgb(211,96,35)" fg:x="1165" fg:w="66"/><text x="21.7564%" y="175.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::clone::Clone&gt;::clone (17 samples, 0.31%)</title><rect x="22.4109%" y="149" width="0.3138%" height="15" fill="rgb(253,215,40)" fg:x="1214" fg:w="17"/><text x="22.6609%" y="159.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="22.6878%" y="133" width="0.0369%" height="15" fill="rgb(211,81,21)" fg:x="1229" fg:w="2"/><text x="22.9378%" y="143.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (11 samples, 0.20%)</title><rect x="22.7248%" y="165" width="0.2031%" height="15" fill="rgb(208,190,38)" fg:x="1231" fg:w="11"/><text x="22.9748%" y="175.50"></text></g><g><title>__memcpy_ssse3 (46 samples, 0.85%)</title><rect x="22.9278%" y="165" width="0.8492%" height="15" fill="rgb(235,213,38)" fg:x="1242" fg:w="46"/><text x="23.1778%" y="175.50"></text></g><g><title>__rdl_alloc (3 samples, 0.06%)</title><rect x="23.7770%" y="165" width="0.0554%" height="15" fill="rgb(237,122,38)" fg:x="1288" fg:w="3"/><text x="24.0270%" y="175.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.04%)</title><rect x="23.8324%" y="165" width="0.0369%" height="15" fill="rgb(244,218,35)" fg:x="1291" fg:w="2"/><text x="24.0824%" y="175.50"></text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="23.8693%" y="165" width="0.0369%" height="15" fill="rgb(240,68,47)" fg:x="1293" fg:w="2"/><text x="24.1193%" y="175.50"></text></g><g><title>__rust_dealloc (6 samples, 0.11%)</title><rect x="23.9062%" y="165" width="0.1108%" height="15" fill="rgb(210,16,53)" fg:x="1295" fg:w="6"/><text x="24.1562%" y="175.50"></text></g><g><title>_int_free (5 samples, 0.09%)</title><rect x="24.0170%" y="165" width="0.0923%" height="15" fill="rgb(235,124,12)" fg:x="1301" fg:w="5"/><text x="24.2670%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (37 samples, 0.68%)</title><rect x="24.9400%" y="149" width="0.6830%" height="15" fill="rgb(224,169,11)" fg:x="1351" fg:w="37"/><text x="25.1900%" y="159.50"></text></g><g><title>&lt;axum::routing::RouteId as core::hash::Hash&gt;::hash (13 samples, 0.24%)</title><rect x="25.3831%" y="133" width="0.2400%" height="15" fill="rgb(250,166,2)" fg:x="1375" fg:w="13"/><text x="25.6331%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="25.8999%" y="133" width="0.0185%" height="15" fill="rgb(242,216,29)" fg:x="1403" fg:w="1"/><text x="26.1499%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.22%)</title><rect x="25.9184%" y="133" width="0.2215%" height="15" fill="rgb(230,116,27)" fg:x="1404" fg:w="12"/><text x="26.1684%" y="143.50"></text></g><g><title>http::extensions::Extensions::insert (30 samples, 0.55%)</title><rect x="25.6230%" y="149" width="0.5538%" height="15" fill="rgb(228,99,48)" fg:x="1388" fg:w="30"/><text x="25.8730%" y="159.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="26.1399%" y="133" width="0.0369%" height="15" fill="rgb(253,11,6)" fg:x="1416" fg:w="2"/><text x="26.3899%" y="143.50"></text></g><g><title>axum::extract::matched_path::set_matched_path_for_request (126 samples, 2.33%)</title><rect x="24.1093%" y="165" width="2.3260%" height="15" fill="rgb(247,143,39)" fg:x="1306" fg:w="126"/><text x="24.3593%" y="175.50">a..</text></g><g><title>http::extensions::Extensions::remove (14 samples, 0.26%)</title><rect x="26.1769%" y="149" width="0.2584%" height="15" fill="rgb(236,97,10)" fg:x="1418" fg:w="14"/><text x="26.4269%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (12 samples, 0.22%)</title><rect x="26.2138%" y="133" width="0.2215%" height="15" fill="rgb(233,208,19)" fg:x="1420" fg:w="12"/><text x="26.4638%" y="143.50"></text></g><g><title>__memcmp_sse4_1 (21 samples, 0.39%)</title><rect x="27.5983%" y="133" width="0.3877%" height="15" fill="rgb(216,164,2)" fg:x="1495" fg:w="21"/><text x="27.8483%" y="143.50"></text></g><g><title>axum::routing::Node::at (97 samples, 1.79%)</title><rect x="26.4353%" y="165" width="1.7907%" height="15" fill="rgb(220,129,5)" fg:x="1432" fg:w="97"/><text x="26.6853%" y="175.50">a..</text></g><g><title>matchit::tree::Node&lt;T&gt;::at (87 samples, 1.61%)</title><rect x="26.6199%" y="149" width="1.6061%" height="15" fill="rgb(242,17,10)" fg:x="1442" fg:w="87"/><text x="26.8699%" y="159.50"></text></g><g><title>matchit::params::Params::new (13 samples, 0.24%)</title><rect x="27.9860%" y="133" width="0.2400%" height="15" fill="rgb(242,107,0)" fg:x="1516" fg:w="13"/><text x="28.2360%" y="143.50"></text></g><g><title>axum::routing::method_routing::MethodRouter&lt;S,B,E&gt;::call_with_state (7 samples, 0.13%)</title><rect x="28.2260%" y="165" width="0.1292%" height="15" fill="rgb(251,28,31)" fg:x="1529" fg:w="7"/><text x="28.4760%" y="175.50"></text></g><g><title>core::iter::adapters::try_process (41 samples, 0.76%)</title><rect x="29.3151%" y="149" width="0.7569%" height="15" fill="rgb(233,223,10)" fg:x="1588" fg:w="41"/><text x="29.5651%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 0.59%)</title><rect x="29.4813%" y="133" width="0.5907%" height="15" fill="rgb(215,21,27)" fg:x="1597" fg:w="32"/><text x="29.7313%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.39%)</title><rect x="29.6843%" y="117" width="0.3877%" height="15" fill="rgb(232,23,21)" fg:x="1608" fg:w="21"/><text x="29.9343%" y="127.50"></text></g><g><title>&lt;matchit::params::ParamsIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.13%)</title><rect x="29.9428%" y="101" width="0.1292%" height="15" fill="rgb(244,5,23)" fg:x="1622" fg:w="7"/><text x="30.1928%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="30.2935%" y="133" width="0.0185%" height="15" fill="rgb(226,81,46)" fg:x="1641" fg:w="1"/><text x="30.5435%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.11%)</title><rect x="30.3120%" y="133" width="0.1108%" height="15" fill="rgb(247,70,30)" fg:x="1642" fg:w="6"/><text x="30.5620%" y="143.50"></text></g><g><title>http::extensions::Extensions::insert (30 samples, 0.55%)</title><rect x="30.0720%" y="149" width="0.5538%" height="15" fill="rgb(212,68,19)" fg:x="1629" fg:w="30"/><text x="30.3220%" y="159.50"></text></g><g><title>malloc (11 samples, 0.20%)</title><rect x="30.4227%" y="133" width="0.2031%" height="15" fill="rgb(240,187,13)" fg:x="1648" fg:w="11"/><text x="30.6727%" y="143.50"></text></g><g><title>axum::routing::url_params::insert_url_params (128 samples, 2.36%)</title><rect x="28.3552%" y="165" width="2.3629%" height="15" fill="rgb(223,113,26)" fg:x="1536" fg:w="128"/><text x="28.6052%" y="175.50">ax..</text></g><g><title>matchit::params::Params::iter (5 samples, 0.09%)</title><rect x="30.6258%" y="149" width="0.0923%" height="15" fill="rgb(206,192,2)" fg:x="1659" fg:w="5"/><text x="30.8758%" y="159.50"></text></g><g><title>__rdl_alloc (5 samples, 0.09%)</title><rect x="30.8473%" y="133" width="0.0923%" height="15" fill="rgb(241,108,4)" fg:x="1671" fg:w="5"/><text x="31.0973%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_clone (22 samples, 0.41%)</title><rect x="30.7181%" y="165" width="0.4061%" height="15" fill="rgb(247,173,49)" fg:x="1664" fg:w="22"/><text x="30.9681%" y="175.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (16 samples, 0.30%)</title><rect x="30.8289%" y="149" width="0.2954%" height="15" fill="rgb(224,114,35)" fg:x="1670" fg:w="16"/><text x="31.0789%" y="159.50"></text></g><g><title>malloc (10 samples, 0.18%)</title><rect x="30.9396%" y="133" width="0.1846%" height="15" fill="rgb(245,159,27)" fg:x="1676" fg:w="10"/><text x="31.1896%" y="143.50"></text></g><g><title>bytes::bytes::static_clone (8 samples, 0.15%)</title><rect x="31.1242%" y="165" width="0.1477%" height="15" fill="rgb(245,172,44)" fg:x="1686" fg:w="8"/><text x="31.3742%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.26%)</title><rect x="31.2719%" y="165" width="0.2584%" height="15" fill="rgb(236,23,11)" fg:x="1694" fg:w="14"/><text x="31.5219%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.26%)</title><rect x="31.5304%" y="165" width="0.2584%" height="15" fill="rgb(205,117,38)" fg:x="1708" fg:w="14"/><text x="31.7804%" y="175.50"></text></g><g><title>&lt;axum::routing::RouteId as core::hash::Hash&gt;::hash (4 samples, 0.07%)</title><rect x="31.7150%" y="149" width="0.0738%" height="15" fill="rgb(237,72,25)" fg:x="1718" fg:w="4"/><text x="31.9650%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::Fallback&lt;(),hyper::body::body::Body&gt;&gt; (14 samples, 0.26%)</title><rect x="31.9550%" y="149" width="0.2584%" height="15" fill="rgb(244,70,9)" fg:x="1731" fg:w="14"/><text x="32.2050%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::random_state::DefaultRandomSource&gt; (2 samples, 0.04%)</title><rect x="32.1765%" y="133" width="0.0369%" height="15" fill="rgb(217,125,39)" fg:x="1743" fg:w="2"/><text x="32.4265%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::method_routing::MethodRouter&gt; (53 samples, 0.98%)</title><rect x="31.7888%" y="165" width="0.9784%" height="15" fill="rgb(235,36,10)" fg:x="1722" fg:w="53"/><text x="32.0388%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::method_routing::MethodEndpoint&lt;(),hyper::body::body::Body,core::convert::Infallible&gt;&gt; (30 samples, 0.55%)</title><rect x="32.2134%" y="149" width="0.5538%" height="15" fill="rgb(251,123,47)" fg:x="1745" fg:w="30"/><text x="32.4634%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::random_state::DefaultRandomSource&gt; (1 samples, 0.02%)</title><rect x="32.7488%" y="133" width="0.0185%" height="15" fill="rgb(221,13,13)" fg:x="1774" fg:w="1"/><text x="32.9988%" y="143.50"></text></g><g><title>__rdl_alloc (3 samples, 0.06%)</title><rect x="33.1549%" y="149" width="0.0554%" height="15" fill="rgb(238,131,9)" fg:x="1796" fg:w="3"/><text x="33.4049%" y="159.50"></text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="33.2103%" y="149" width="0.0369%" height="15" fill="rgb(211,50,8)" fg:x="1799" fg:w="2"/><text x="33.4603%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (15 samples, 0.28%)</title><rect x="34.0594%" y="117" width="0.2769%" height="15" fill="rgb(245,182,24)" fg:x="1845" fg:w="15"/><text x="34.3094%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="34.3363%" y="117" width="0.0185%" height="15" fill="rgb(242,14,37)" fg:x="1860" fg:w="1"/><text x="34.5863%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (72 samples, 1.33%)</title><rect x="33.2472%" y="149" width="1.3291%" height="15" fill="rgb(246,228,12)" fg:x="1801" fg:w="72"/><text x="33.4972%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (55 samples, 1.02%)</title><rect x="33.5610%" y="133" width="1.0153%" height="15" fill="rgb(213,55,15)" fg:x="1818" fg:w="55"/><text x="33.8110%" y="143.50"></text></g><g><title>malloc (12 samples, 0.22%)</title><rect x="34.3548%" y="117" width="0.2215%" height="15" fill="rgb(209,9,3)" fg:x="1861" fg:w="12"/><text x="34.6048%" y="127.50"></text></g><g><title>http::extensions::Extensions::insert (104 samples, 1.92%)</title><rect x="32.7672%" y="165" width="1.9199%" height="15" fill="rgb(230,59,30)" fg:x="1775" fg:w="104"/><text x="33.0172%" y="175.50">h..</text></g><g><title>malloc (6 samples, 0.11%)</title><rect x="34.5763%" y="149" width="0.1108%" height="15" fill="rgb(209,121,21)" fg:x="1873" fg:w="6"/><text x="34.8263%" y="159.50"></text></g><g><title>http::uri::Uri::has_path (12 samples, 0.22%)</title><rect x="34.6871%" y="165" width="0.2215%" height="15" fill="rgb(220,109,13)" fg:x="1879" fg:w="12"/><text x="34.9371%" y="175.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (820 samples, 15.14%)</title><rect x="19.8265%" y="181" width="15.1375%" height="15" fill="rgb(232,18,1)" fg:x="1074" fg:w="820"/><text x="20.0765%" y="191.50">&lt;T as hyper::service::h..</text></g><g><title>malloc (3 samples, 0.06%)</title><rect x="34.9086%" y="165" width="0.0554%" height="15" fill="rgb(215,41,42)" fg:x="1891" fg:w="3"/><text x="35.1586%" y="175.50"></text></g><g><title>__memcpy_ssse3 (45 samples, 0.83%)</title><rect x="34.9640%" y="181" width="0.8307%" height="15" fill="rgb(224,123,36)" fg:x="1894" fg:w="45"/><text x="35.2140%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;axum::routing::route::RouteFuture&lt;hyper::body::body::Body,core::convert::Infallible&gt;&gt;&gt; (6 samples, 0.11%)</title><rect x="35.7947%" y="181" width="0.1108%" height="15" fill="rgb(240,125,3)" fg:x="1939" fg:w="6"/><text x="36.0447%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (11 samples, 0.20%)</title><rect x="35.9055%" y="181" width="0.2031%" height="15" fill="rgb(205,98,50)" fg:x="1945" fg:w="11"/><text x="36.1555%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (8 samples, 0.15%)</title><rect x="36.1085%" y="181" width="0.1477%" height="15" fill="rgb(205,185,37)" fg:x="1956" fg:w="8"/><text x="36.3585%" y="191.50"></text></g><g><title>bytes::bytes::static_drop (5 samples, 0.09%)</title><rect x="36.1639%" y="165" width="0.0923%" height="15" fill="rgb(238,207,15)" fg:x="1959" fg:w="5"/><text x="36.4139%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (936 samples, 17.28%)</title><rect x="19.2542%" y="197" width="17.2789%" height="15" fill="rgb(213,199,42)" fg:x="1043" fg:w="936"/><text x="19.5042%" y="207.50">&lt;hyper::proto::h1::dispatch..</text></g><g><title>http::request::Parts::new (15 samples, 0.28%)</title><rect x="36.2562%" y="181" width="0.2769%" height="15" fill="rgb(235,201,11)" fg:x="1964" fg:w="15"/><text x="36.5062%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::is_server (16 samples, 0.30%)</title><rect x="36.5331%" y="197" width="0.2954%" height="15" fill="rgb(207,46,11)" fg:x="1979" fg:w="16"/><text x="36.7831%" y="207.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="37.6777%" y="149" width="0.0369%" height="15" fill="rgb(241,35,35)" fg:x="2041" fg:w="2"/><text x="37.9277%" y="159.50"></text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="37.7146%" y="149" width="0.0369%" height="15" fill="rgb(243,32,47)" fg:x="2043" fg:w="2"/><text x="37.9646%" y="159.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="37.7515%" y="149" width="0.0369%" height="15" fill="rgb(247,202,23)" fg:x="2045" fg:w="2"/><text x="38.0015%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="37.7884%" y="149" width="0.0185%" height="15" fill="rgb(219,102,11)" fg:x="2047" fg:w="1"/><text x="38.0384%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;hyper::body::body::Extra&gt;&gt;&gt; (4 samples, 0.07%)</title><rect x="37.8069%" y="149" width="0.0738%" height="15" fill="rgb(243,110,44)" fg:x="2048" fg:w="4"/><text x="38.0569%" y="159.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="38.0838%" y="133" width="0.0738%" height="15" fill="rgb(222,74,54)" fg:x="2063" fg:w="4"/><text x="38.3338%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_drop (7 samples, 0.13%)</title><rect x="38.1577%" y="133" width="0.1292%" height="15" fill="rgb(216,99,12)" fg:x="2067" fg:w="7"/><text x="38.4077%" y="143.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (4 samples, 0.07%)</title><rect x="38.2130%" y="117" width="0.0738%" height="15" fill="rgb(226,22,26)" fg:x="2070" fg:w="4"/><text x="38.4630%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.06%)</title><rect x="38.2869%" y="133" width="0.0554%" height="15" fill="rgb(217,163,10)" fg:x="2074" fg:w="3"/><text x="38.5369%" y="143.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="38.4715%" y="117" width="0.0185%" height="15" fill="rgb(213,25,53)" fg:x="2084" fg:w="1"/><text x="38.7215%" y="127.50"></text></g><g><title>_int_free (16 samples, 0.30%)</title><rect x="38.4899%" y="117" width="0.2954%" height="15" fill="rgb(252,105,26)" fg:x="2085" fg:w="16"/><text x="38.7399%" y="127.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="38.9330%" y="101" width="0.0185%" height="15" fill="rgb(220,39,43)" fg:x="2109" fg:w="1"/><text x="39.1830%" y="111.50"></text></g><g><title>__lll_lock_wait_private (2 samples, 0.04%)</title><rect x="40.0037%" y="85" width="0.0369%" height="15" fill="rgb(229,68,48)" fg:x="2167" fg:w="2"/><text x="40.2537%" y="95.50"></text></g><g><title>_int_free (61 samples, 1.13%)</title><rect x="38.9514%" y="101" width="1.1261%" height="15" fill="rgb(252,8,32)" fg:x="2110" fg:w="61"/><text x="39.2014%" y="111.50"></text></g><g><title>__lll_unlock_wake_private (2 samples, 0.04%)</title><rect x="40.0406%" y="85" width="0.0369%" height="15" fill="rgb(223,20,43)" fg:x="2169" fg:w="2"/><text x="40.2906%" y="95.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (77 samples, 1.42%)</title><rect x="38.7853%" y="117" width="1.4215%" height="15" fill="rgb(229,81,49)" fg:x="2101" fg:w="77"/><text x="39.0353%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.13%)</title><rect x="40.0775%" y="101" width="0.1292%" height="15" fill="rgb(236,28,36)" fg:x="2171" fg:w="7"/><text x="40.3275%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (113 samples, 2.09%)</title><rect x="38.3423%" y="133" width="2.0860%" height="15" fill="rgb(249,185,26)" fg:x="2077" fg:w="113"/><text x="38.5923%" y="143.50">c..</text></g><g><title>cfree@GLIBC_2.2.5 (12 samples, 0.22%)</title><rect x="40.2068%" y="117" width="0.2215%" height="15" fill="rgb(249,174,33)" fg:x="2178" fg:w="12"/><text x="40.4568%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (20 samples, 0.37%)</title><rect x="40.4283%" y="133" width="0.3692%" height="15" fill="rgb(233,201,37)" fg:x="2190" fg:w="20"/><text x="40.6783%" y="143.50"></text></g><g><title>bytes::bytes::static_drop (8 samples, 0.15%)</title><rect x="40.6498%" y="117" width="0.1477%" height="15" fill="rgb(221,78,26)" fg:x="2202" fg:w="8"/><text x="40.8998%" y="127.50"></text></g><g><title>_int_free (19 samples, 0.35%)</title><rect x="41.0744%" y="117" width="0.3507%" height="15" fill="rgb(250,127,30)" fg:x="2225" fg:w="19"/><text x="41.3244%" y="127.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="41.5174%" y="101" width="0.0185%" height="15" fill="rgb(230,49,44)" fg:x="2249" fg:w="1"/><text x="41.7674%" y="111.50"></text></g><g><title>_int_free (11 samples, 0.20%)</title><rect x="41.5359%" y="101" width="0.2031%" height="15" fill="rgb(229,67,23)" fg:x="2250" fg:w="11"/><text x="41.7859%" y="111.50"></text></g><g><title>bytes::bytes::shared_drop (19 samples, 0.35%)</title><rect x="41.4251%" y="117" width="0.3507%" height="15" fill="rgb(249,83,47)" fg:x="2244" fg:w="19"/><text x="41.6751%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="41.7390%" y="101" width="0.0369%" height="15" fill="rgb(215,43,3)" fg:x="2261" fg:w="2"/><text x="41.9890%" y="111.50"></text></g><g><title>cfree@GLIBC_2.2.5 (10 samples, 0.18%)</title><rect x="41.7759%" y="117" width="0.1846%" height="15" fill="rgb(238,154,13)" fg:x="2263" fg:w="10"/><text x="42.0259%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::extract::matched_path::MatchedPath&gt; (15 samples, 0.28%)</title><rect x="41.9605%" y="117" width="0.2769%" height="15" fill="rgb(219,56,2)" fg:x="2273" fg:w="15"/><text x="42.2105%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::extract::request_parts::OriginalUri&gt; (5 samples, 0.09%)</title><rect x="42.2374%" y="117" width="0.0923%" height="15" fill="rgb(233,0,4)" fg:x="2288" fg:w="5"/><text x="42.4874%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::url_params::UrlParams&gt; (13 samples, 0.24%)</title><rect x="42.3297%" y="117" width="0.2400%" height="15" fill="rgb(235,30,7)" fg:x="2293" fg:w="13"/><text x="42.5797%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="42.5328%" y="101" width="0.0369%" height="15" fill="rgb(250,79,13)" fg:x="2304" fg:w="2"/><text x="42.7828%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::request::Parts&gt; (263 samples, 4.86%)</title><rect x="37.8807%" y="149" width="4.8551%" height="15" fill="rgb(211,146,34)" fg:x="2052" fg:w="263"/><text x="38.1307%" y="159.50">core::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (105 samples, 1.94%)</title><rect x="40.7975%" y="133" width="1.9383%" height="15" fill="rgb(228,22,38)" fg:x="2210" fg:w="105"/><text x="41.0475%" y="143.50">h..</text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (9 samples, 0.17%)</title><rect x="42.5697%" y="117" width="0.1661%" height="15" fill="rgb(235,168,5)" fg:x="2306" fg:w="9"/><text x="42.8197%" y="127.50"></text></g><g><title>bytes::bytes::static_drop (5 samples, 0.09%)</title><rect x="42.6435%" y="101" width="0.0923%" height="15" fill="rgb(221,155,16)" fg:x="2310" fg:w="5"/><text x="42.8935%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (6 samples, 0.11%)</title><rect x="42.7358%" y="149" width="0.1108%" height="15" fill="rgb(215,215,53)" fg:x="2315" fg:w="6"/><text x="42.9858%" y="159.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;((),),S,B&gt;&gt;::call (289 samples, 5.34%)</title><rect x="37.5300%" y="165" width="5.3351%" height="15" fill="rgb(223,4,10)" fg:x="2033" fg:w="289"/><text x="37.7800%" y="175.50">&lt;F as a..</text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="42.8466%" y="149" width="0.0185%" height="15" fill="rgb(234,103,6)" fg:x="2321" fg:w="1"/><text x="43.0966%" y="159.50"></text></g><g><title>__memcpy_ssse3 (5 samples, 0.09%)</title><rect x="42.8651%" y="165" width="0.0923%" height="15" fill="rgb(227,97,0)" fg:x="2322" fg:w="5"/><text x="43.1151%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="42.9574%" y="165" width="0.0185%" height="15" fill="rgb(234,150,53)" fg:x="2327" fg:w="1"/><text x="43.2074%" y="175.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (310 samples, 5.72%)</title><rect x="37.3639%" y="181" width="5.7227%" height="15" fill="rgb(228,201,54)" fg:x="2024" fg:w="310"/><text x="37.6139%" y="191.50">&lt;tower:..</text></g><g><title>malloc (6 samples, 0.11%)</title><rect x="42.9758%" y="165" width="0.1108%" height="15" fill="rgb(222,22,37)" fg:x="2328" fg:w="6"/><text x="43.2258%" y="175.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (7 samples, 0.13%)</title><rect x="43.0866%" y="181" width="0.1292%" height="15" fill="rgb(237,53,32)" fg:x="2334" fg:w="7"/><text x="43.3366%" y="191.50"></text></g><g><title>axum_core::response::into_response_parts::ResponseParts::headers_mut (6 samples, 0.11%)</title><rect x="46.1695%" y="85" width="0.1108%" height="15" fill="rgb(233,25,53)" fg:x="2501" fg:w="6"/><text x="46.4195%" y="95.50"></text></g><g><title>bytes::bytes::static_drop (1 samples, 0.02%)</title><rect x="46.2802%" y="85" width="0.0185%" height="15" fill="rgb(210,40,34)" fg:x="2507" fg:w="1"/><text x="46.5302%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;(http::header::name::HeaderName,http::header::value::HeaderValue),1_usize&gt;&gt; (16 samples, 0.30%)</title><rect x="46.2987%" y="85" width="0.2954%" height="15" fill="rgb(241,220,44)" fg:x="2508" fg:w="16"/><text x="46.5487%" y="95.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (9 samples, 0.17%)</title><rect x="47.1294%" y="69" width="0.1661%" height="15" fill="rgb(235,28,35)" fg:x="2553" fg:w="9"/><text x="47.3794%" y="79.50"></text></g><g><title>&lt;[(K,V): N] as axum_core::response::into_response_parts::IntoResponseParts&gt;::into_response_parts (92 samples, 1.70%)</title><rect x="45.8372%" y="101" width="1.6984%" height="15" fill="rgb(210,56,17)" fg:x="2483" fg:w="92"/><text x="46.0872%" y="111.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (51 samples, 0.94%)</title><rect x="46.5941%" y="85" width="0.9415%" height="15" fill="rgb(224,130,29)" fg:x="2524" fg:w="51"/><text x="46.8441%" y="95.50"></text></g><g><title>http::header::map::hash_elem_using (13 samples, 0.24%)</title><rect x="47.2956%" y="69" width="0.2400%" height="15" fill="rgb(235,212,8)" fg:x="2562" fg:w="13"/><text x="47.5456%" y="79.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="48.2555%" y="69" width="0.0185%" height="15" fill="rgb(223,33,50)" fg:x="2614" fg:w="1"/><text x="48.5055%" y="79.50"></text></g><g><title>http::response::Parts::new (5 samples, 0.09%)</title><rect x="48.2740%" y="69" width="0.0923%" height="15" fill="rgb(219,149,13)" fg:x="2615" fg:w="5"/><text x="48.5240%" y="79.50"></text></g><g><title>&lt;http_body::full::Full&lt;bytes::bytes::Bytes&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response (29 samples, 0.54%)</title><rect x="47.9047%" y="85" width="0.5354%" height="15" fill="rgb(250,156,29)" fg:x="2595" fg:w="29"/><text x="48.1547%" y="95.50"></text></g><g><title>malloc (4 samples, 0.07%)</title><rect x="48.3663%" y="69" width="0.0738%" height="15" fill="rgb(216,193,19)" fg:x="2620" fg:w="4"/><text x="48.6163%" y="79.50"></text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="49.3077%" y="53" width="0.0369%" height="15" fill="rgb(216,135,14)" fg:x="2671" fg:w="2"/><text x="49.5577%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (7 samples, 0.13%)</title><rect x="49.3447%" y="53" width="0.1292%" height="15" fill="rgb(241,47,5)" fg:x="2673" fg:w="7"/><text x="49.5947%" y="63.50"></text></g><g><title>http::header::map::Danger::is_yellow (3 samples, 0.06%)</title><rect x="49.4739%" y="53" width="0.0554%" height="15" fill="rgb(233,42,35)" fg:x="2680" fg:w="3"/><text x="49.7239%" y="63.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (52 samples, 0.96%)</title><rect x="48.8093%" y="69" width="0.9599%" height="15" fill="rgb(231,13,6)" fg:x="2644" fg:w="52"/><text x="49.0593%" y="79.50"></text></g><g><title>malloc (13 samples, 0.24%)</title><rect x="49.5293%" y="53" width="0.2400%" height="15" fill="rgb(207,181,40)" fg:x="2683" fg:w="13"/><text x="49.7793%" y="63.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (91 samples, 1.68%)</title><rect x="48.4401%" y="85" width="1.6799%" height="15" fill="rgb(254,173,49)" fg:x="2624" fg:w="91"/><text x="48.6901%" y="95.50"></text></g><g><title>http::header::map::hash_elem_using (19 samples, 0.35%)</title><rect x="49.7692%" y="69" width="0.3507%" height="15" fill="rgb(221,1,38)" fg:x="2696" fg:w="19"/><text x="50.0192%" y="79.50"></text></g><g><title>http::header::value::is_visible_ascii (10 samples, 0.18%)</title><rect x="50.1200%" y="85" width="0.1846%" height="15" fill="rgb(206,124,46)" fg:x="2715" fg:w="10"/><text x="50.3700%" y="95.50"></text></g><g><title>&lt;bytes::bytes::Bytes as axum_core::response::into_response::IntoResponse&gt;::into_response (158 samples, 2.92%)</title><rect x="47.5355%" y="101" width="2.9167%" height="15" fill="rgb(249,21,11)" fg:x="2575" fg:w="158"/><text x="47.7855%" y="111.50">&lt;b..</text></g><g><title>mime::Source::as_ref (8 samples, 0.15%)</title><rect x="50.3046%" y="85" width="0.1477%" height="15" fill="rgb(222,201,40)" fg:x="2725" fg:w="8"/><text x="50.5546%" y="95.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="50.4523%" y="101" width="0.0185%" height="15" fill="rgb(235,61,29)" fg:x="2733" fg:w="1"/><text x="50.7023%" y="111.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="50.4707%" y="101" width="0.0185%" height="15" fill="rgb(219,207,3)" fg:x="2734" fg:w="1"/><text x="50.7207%" y="111.50"></text></g><g><title>_int_free (3 samples, 0.06%)</title><rect x="50.4892%" y="101" width="0.0554%" height="15" fill="rgb(222,56,46)" fg:x="2735" fg:w="3"/><text x="50.7392%" y="111.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (9 samples, 0.17%)</title><rect x="50.8215%" y="85" width="0.1661%" height="15" fill="rgb(239,76,54)" fg:x="2753" fg:w="9"/><text x="51.0715%" y="95.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (29 samples, 0.54%)</title><rect x="50.5446%" y="101" width="0.5354%" height="15" fill="rgb(231,124,27)" fg:x="2738" fg:w="29"/><text x="50.7946%" y="111.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (5 samples, 0.09%)</title><rect x="50.9876%" y="85" width="0.0923%" height="15" fill="rgb(249,195,6)" fg:x="2762" fg:w="5"/><text x="51.2376%" y="95.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="51.0799%" y="101" width="0.0185%" height="15" fill="rgb(237,174,47)" fg:x="2767" fg:w="1"/><text x="51.3299%" y="111.50"></text></g><g><title>http::header::value::is_visible_ascii (7 samples, 0.13%)</title><rect x="51.0984%" y="101" width="0.1292%" height="15" fill="rgb(206,201,31)" fg:x="2768" fg:w="7"/><text x="51.3484%" y="111.50"></text></g><g><title>malloc (11 samples, 0.20%)</title><rect x="51.2276%" y="101" width="0.2031%" height="15" fill="rgb(231,57,52)" fg:x="2775" fg:w="11"/><text x="51.4776%" y="111.50"></text></g><g><title>mime::Source::as_ref (8 samples, 0.15%)</title><rect x="51.4307%" y="101" width="0.1477%" height="15" fill="rgb(248,177,22)" fg:x="2786" fg:w="8"/><text x="51.6807%" y="111.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (12 samples, 0.22%)</title><rect x="52.0030%" y="85" width="0.2215%" height="15" fill="rgb(215,211,37)" fg:x="2817" fg:w="12"/><text x="52.2530%" y="95.50"></text></g><g><title>__memcpy_ssse3 (2 samples, 0.04%)</title><rect x="52.1876%" y="69" width="0.0369%" height="15" fill="rgb(241,128,51)" fg:x="2827" fg:w="2"/><text x="52.4376%" y="79.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (28 samples, 0.52%)</title><rect x="52.8521%" y="69" width="0.5169%" height="15" fill="rgb(227,165,31)" fg:x="2863" fg:w="28"/><text x="53.1021%" y="79.50"></text></g><g><title>__memcpy_ssse3 (16 samples, 0.30%)</title><rect x="53.0737%" y="53" width="0.2954%" height="15" fill="rgb(228,167,24)" fg:x="2875" fg:w="16"/><text x="53.3237%" y="63.50"></text></g><g><title>&lt;axum::json::Json&lt;T&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response (550 samples, 10.15%)</title><rect x="44.7111%" y="117" width="10.1532%" height="15" fill="rgb(228,143,12)" fg:x="2422" fg:w="550"/><text x="44.9611%" y="127.50">&lt;axum::json::Js..</text></g><g><title>rust_axum::data::_::&lt;impl serde::ser::Serialize for rust_axum::data::CPUShort&gt;::serialize (178 samples, 3.29%)</title><rect x="51.5784%" y="101" width="3.2860%" height="15" fill="rgb(249,149,8)" fg:x="2794" fg:w="178"/><text x="51.8284%" y="111.50">rus..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (143 samples, 2.64%)</title><rect x="52.2245%" y="85" width="2.6398%" height="15" fill="rgb(243,35,44)" fg:x="2829" fg:w="143"/><text x="52.4745%" y="95.50">se..</text></g><g><title>serde_json::ser::format_escaped_str (81 samples, 1.50%)</title><rect x="53.3690%" y="69" width="1.4953%" height="15" fill="rgb(246,89,9)" fg:x="2891" fg:w="81"/><text x="53.6190%" y="79.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (37 samples, 0.68%)</title><rect x="54.1813%" y="53" width="0.6830%" height="15" fill="rgb(233,213,13)" fg:x="2935" fg:w="37"/><text x="54.4313%" y="63.50"></text></g><g><title>__memcpy_ssse3 (16 samples, 0.30%)</title><rect x="54.5689%" y="37" width="0.2954%" height="15" fill="rgb(233,141,41)" fg:x="2956" fg:w="16"/><text x="54.8189%" y="47.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (8 samples, 0.15%)</title><rect x="56.4704%" y="69" width="0.1477%" height="15" fill="rgb(239,167,4)" fg:x="3059" fg:w="8"/><text x="56.7204%" y="79.50"></text></g><g><title>__memcpy_ssse3 (3 samples, 0.06%)</title><rect x="56.6181%" y="69" width="0.0554%" height="15" fill="rgb(209,217,16)" fg:x="3067" fg:w="3"/><text x="56.8681%" y="79.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="56.6734%" y="69" width="0.0369%" height="15" fill="rgb(219,88,35)" fg:x="3070" fg:w="2"/><text x="56.9234%" y="79.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (24 samples, 0.44%)</title><rect x="56.2858%" y="85" width="0.4430%" height="15" fill="rgb(220,193,23)" fg:x="3049" fg:w="24"/><text x="56.5358%" y="95.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="56.7104%" y="69" width="0.0185%" height="15" fill="rgb(230,90,52)" fg:x="3072" fg:w="1"/><text x="56.9604%" y="79.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (33 samples, 0.61%)</title><rect x="56.7288%" y="85" width="0.6092%" height="15" fill="rgb(252,106,19)" fg:x="3073" fg:w="33"/><text x="56.9788%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (25 samples, 0.46%)</title><rect x="56.8765%" y="69" width="0.4615%" height="15" fill="rgb(206,74,20)" fg:x="3081" fg:w="25"/><text x="57.1265%" y="79.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (20 samples, 0.37%)</title><rect x="57.3380%" y="85" width="0.3692%" height="15" fill="rgb(230,138,44)" fg:x="3106" fg:w="20"/><text x="57.5880%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (146 samples, 2.70%)</title><rect x="55.1043%" y="101" width="2.6952%" height="15" fill="rgb(235,182,43)" fg:x="2985" fg:w="146"/><text x="55.3543%" y="111.50">&lt;&amp;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (5 samples, 0.09%)</title><rect x="57.7072%" y="85" width="0.0923%" height="15" fill="rgb(242,16,51)" fg:x="3126" fg:w="5"/><text x="57.9572%" y="95.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;((),),S,B&gt;&gt;::call::_{{closure}} (743 samples, 13.72%)</title><rect x="44.2127%" y="133" width="13.7161%" height="15" fill="rgb(248,9,4)" fg:x="2395" fg:w="743"/><text x="44.4627%" y="143.50">&lt;F as axum::handler::..</text></g><g><title>serde_json::de::from_str (166 samples, 3.06%)</title><rect x="54.8643%" y="117" width="3.0644%" height="15" fill="rgb(210,31,22)" fg:x="2972" fg:w="166"/><text x="55.1143%" y="127.50">ser..</text></g><g><title>serde_json::read::StrRead::new (7 samples, 0.13%)</title><rect x="57.7995%" y="101" width="0.1292%" height="15" fill="rgb(239,54,39)" fg:x="3131" fg:w="7"/><text x="58.0495%" y="111.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="57.9287%" y="133" width="0.0185%" height="15" fill="rgb(230,99,41)" fg:x="3138" fg:w="1"/><text x="58.1787%" y="143.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="57.9472%" y="133" width="0.0185%" height="15" fill="rgb(253,106,12)" fg:x="3139" fg:w="1"/><text x="58.1972%" y="143.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="57.9657%" y="133" width="0.0738%" height="15" fill="rgb(213,46,41)" fg:x="3140" fg:w="4"/><text x="58.2157%" y="143.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="58.0395%" y="133" width="0.0369%" height="15" fill="rgb(215,133,35)" fg:x="3144" fg:w="2"/><text x="58.2895%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rust_axum::cpu_short as axum::handler::Handler&lt;((),),()&gt;&gt;::call::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="58.0764%" y="133" width="0.0185%" height="15" fill="rgb(213,28,5)" fg:x="3146" fg:w="1"/><text x="58.3264%" y="143.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (776 samples, 14.33%)</title><rect x="43.8435%" y="149" width="14.3253%" height="15" fill="rgb(215,77,49)" fg:x="2375" fg:w="776"/><text x="44.0935%" y="159.50">&lt;futures_util::future:..</text></g><g><title>core::result::Result::Ok (4 samples, 0.07%)</title><rect x="58.0949%" y="133" width="0.0738%" height="15" fill="rgb(248,100,22)" fg:x="3147" fg:w="4"/><text x="58.3449%" y="143.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (811 samples, 14.97%)</title><rect x="43.2158%" y="181" width="14.9714%" height="15" fill="rgb(208,67,9)" fg:x="2341" fg:w="811"/><text x="43.4658%" y="191.50">&lt;tower::util::map_respo..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (799 samples, 14.75%)</title><rect x="43.4373%" y="165" width="14.7499%" height="15" fill="rgb(219,133,21)" fg:x="2353" fg:w="799"/><text x="43.6873%" y="175.50">&lt;futures_util::future:..</text></g><g><title>axum_core::body::boxed (1 samples, 0.02%)</title><rect x="58.1687%" y="149" width="0.0185%" height="15" fill="rgb(246,46,29)" fg:x="3151" fg:w="1"/><text x="58.4187%" y="159.50"></text></g><g><title>__memcpy_ssse3 (10 samples, 0.18%)</title><rect x="58.1872%" y="181" width="0.1846%" height="15" fill="rgb(246,185,52)" fg:x="3152" fg:w="10"/><text x="58.4372%" y="191.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="58.3718%" y="181" width="0.0738%" height="15" fill="rgb(252,136,11)" fg:x="3162" fg:w="4"/><text x="58.6218%" y="191.50"></text></g><g><title>_ZN4core3ptr603drop_in_place$LT$tower..util..map_response..MapResponseFuture$LT$axum..handler..future..IntoServiceFuture$LT$core..pin..Pin$LT$alloc..boxed..Box$LT$dyn$u20$core..future..future..Future$u2b$Output$u20$$u3d$$u20$http..response..Response$LT$http_body..combinators..box_body..UnsyncBoxBody$LT$bytes..bytes..Bytes$C$axum_core..error..Error$GT$$GT$$u2b$core..marker..Send$GT$$GT$$GT$$C$$LT$http..response..Response$LT$http_body..combinators..box_body..UnsyncBoxBody$LT$bytes..bytes..Bytes$C$axum_core..error..Error$GT$$GT$$u20$as$u20$axum_core..response..into_response..IntoResponse$GT$..into_response$GT$$GT$17hd1ed69fc947b5c9aE (4 samples, 0.07%)</title><rect x="58.5933%" y="165" width="0.0738%" height="15" fill="rgb(219,138,53)" fg:x="3174" fg:w="4"/><text x="58.8433%" y="175.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1,185 samples, 21.88%)</title><rect x="36.8285%" y="197" width="21.8756%" height="15" fill="rgb(211,51,23)" fg:x="1995" fg:w="1185"/><text x="37.0785%" y="207.50">&lt;tower::util::oneshot::Oneshot&lt;S,Re..</text></g><g><title>core::ptr::drop_in_place&lt;tower::util::oneshot::State&lt;tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;,http::request::Request&lt;hyper::body::body::Body&gt;&gt;&gt; (14 samples, 0.26%)</title><rect x="58.4456%" y="181" width="0.2584%" height="15" fill="rgb(247,221,28)" fg:x="3166" fg:w="14"/><text x="58.6956%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::random_state::DefaultRandomSource&gt; (2 samples, 0.04%)</title><rect x="58.6672%" y="165" width="0.0369%" height="15" fill="rgb(251,222,45)" fg:x="3178" fg:w="2"/><text x="58.9172%" y="175.50"></text></g><g><title>__memcpy_ssse3 (41 samples, 0.76%)</title><rect x="58.7041%" y="197" width="0.7569%" height="15" fill="rgb(217,162,53)" fg:x="3180" fg:w="41"/><text x="58.9541%" y="207.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="59.4610%" y="197" width="0.0369%" height="15" fill="rgb(229,93,14)" fg:x="3221" fg:w="2"/><text x="59.7110%" y="207.50"></text></g><g><title>axum::routing::route::set_allow_header (3 samples, 0.06%)</title><rect x="59.4979%" y="197" width="0.0554%" height="15" fill="rgb(209,67,49)" fg:x="3223" fg:w="3"/><text x="59.7479%" y="207.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (7 samples, 0.13%)</title><rect x="60.1255%" y="165" width="0.1292%" height="15" fill="rgb(213,87,29)" fg:x="3257" fg:w="7"/><text x="60.3755%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.04%)</title><rect x="60.2178%" y="149" width="0.0369%" height="15" fill="rgb(205,151,52)" fg:x="3262" fg:w="2"/><text x="60.4678%" y="159.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (17 samples, 0.31%)</title><rect x="59.9778%" y="181" width="0.3138%" height="15" fill="rgb(253,215,39)" fg:x="3249" fg:w="17"/><text x="60.2278%" y="191.50"></text></g><g><title>__memcpy_ssse3 (2 samples, 0.04%)</title><rect x="60.2548%" y="165" width="0.0369%" height="15" fill="rgb(221,220,41)" fg:x="3264" fg:w="2"/><text x="60.5048%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::contains_key (21 samples, 0.39%)</title><rect x="60.2917%" y="181" width="0.3877%" height="15" fill="rgb(218,133,21)" fg:x="3266" fg:w="21"/><text x="60.5417%" y="191.50"></text></g><g><title>http::header::map::hash_elem_using (6 samples, 0.11%)</title><rect x="60.5686%" y="165" width="0.1108%" height="15" fill="rgb(221,193,43)" fg:x="3281" fg:w="6"/><text x="60.8186%" y="175.50"></text></g><g><title>http::header::map::Danger::is_yellow (3 samples, 0.06%)</title><rect x="61.2885%" y="165" width="0.0554%" height="15" fill="rgb(240,128,52)" fg:x="3320" fg:w="3"/><text x="61.5385%" y="175.50"></text></g><g><title>axum::routing::route::set_content_length (101 samples, 1.86%)</title><rect x="59.5533%" y="197" width="1.8645%" height="15" fill="rgb(253,114,12)" fg:x="3226" fg:w="101"/><text x="59.8033%" y="207.50">a..</text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (40 samples, 0.74%)</title><rect x="60.6793%" y="181" width="0.7384%" height="15" fill="rgb(215,223,47)" fg:x="3287" fg:w="40"/><text x="60.9293%" y="191.50"></text></g><g><title>http::header::map::hash_elem_using (4 samples, 0.07%)</title><rect x="61.3439%" y="165" width="0.0738%" height="15" fill="rgb(248,225,23)" fg:x="3323" fg:w="4"/><text x="61.5939%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="61.4178%" y="197" width="0.0369%" height="15" fill="rgb(250,108,0)" fg:x="3327" fg:w="2"/><text x="61.6678%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;axum::routing::route::RouteFuture&lt;hyper::body::body::Body,core::convert::Infallible&gt;&gt;&gt; (4 samples, 0.07%)</title><rect x="61.4547%" y="197" width="0.0738%" height="15" fill="rgb(228,208,7)" fg:x="3329" fg:w="4"/><text x="61.7047%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body::combinators::map_err::MapErr&lt;http_body::full::Full&lt;bytes::bytes::Bytes&gt;,axum_core::error::Error::new&lt;core::convert::Infallible&gt;&gt;&gt; (4 samples, 0.07%)</title><rect x="61.5285%" y="197" width="0.0738%" height="15" fill="rgb(244,45,10)" fg:x="3333" fg:w="4"/><text x="61.7785%" y="207.50"></text></g><g><title>core::slice::index::range (1 samples, 0.02%)</title><rect x="61.6024%" y="197" width="0.0185%" height="15" fill="rgb(207,125,25)" fg:x="3337" fg:w="1"/><text x="61.8524%" y="207.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (15 samples, 0.28%)</title><rect x="61.6208%" y="197" width="0.2769%" height="15" fill="rgb(210,195,18)" fg:x="3338" fg:w="15"/><text x="61.8708%" y="207.50"></text></g><g><title>hyper::body::body::Body::new (8 samples, 0.15%)</title><rect x="61.8977%" y="197" width="0.1477%" height="15" fill="rgb(249,80,12)" fg:x="3353" fg:w="8"/><text x="62.1477%" y="207.50"></text></g><g><title>hyper::proto::h1::Wants::contains (7 samples, 0.13%)</title><rect x="62.0454%" y="197" width="0.1292%" height="15" fill="rgb(221,65,9)" fg:x="3361" fg:w="7"/><text x="62.2954%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::is_server (4 samples, 0.07%)</title><rect x="62.5254%" y="181" width="0.0738%" height="15" fill="rgb(235,49,36)" fg:x="3387" fg:w="4"/><text x="62.7754%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::State::wants_keep_alive (10 samples, 0.18%)</title><rect x="62.5992%" y="181" width="0.1846%" height="15" fill="rgb(225,32,20)" fg:x="3391" fg:w="10"/><text x="62.8492%" y="191.50"></text></g><g><title>&lt;http::header::map::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.13%)</title><rect x="65.8113%" y="149" width="0.1292%" height="15" fill="rgb(215,141,46)" fg:x="3565" fg:w="7"/><text x="66.0613%" y="159.50"></text></g><g><title>__memcpy_ssse3 (46 samples, 0.85%)</title><rect x="65.9406%" y="149" width="0.8492%" height="15" fill="rgb(250,160,47)" fg:x="3572" fg:w="46"/><text x="66.1906%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 0.28%)</title><rect x="66.7897%" y="149" width="0.2769%" height="15" fill="rgb(216,222,40)" fg:x="3618" fg:w="15"/><text x="67.0397%" y="159.50"></text></g><g><title>__memcpy_ssse3 (7 samples, 0.13%)</title><rect x="66.9374%" y="133" width="0.1292%" height="15" fill="rgb(234,217,39)" fg:x="3626" fg:w="7"/><text x="67.1874%" y="143.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.06%)</title><rect x="67.2328%" y="133" width="0.0554%" height="15" fill="rgb(207,178,40)" fg:x="3642" fg:w="3"/><text x="67.4828%" y="143.50"></text></g><g><title>_int_free (6 samples, 0.11%)</title><rect x="67.2882%" y="133" width="0.1108%" height="15" fill="rgb(221,136,13)" fg:x="3645" fg:w="6"/><text x="67.5382%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_drop (22 samples, 0.41%)</title><rect x="67.0666%" y="149" width="0.4061%" height="15" fill="rgb(249,199,10)" fg:x="3633" fg:w="22"/><text x="67.3166%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="67.3989%" y="133" width="0.0738%" height="15" fill="rgb(249,222,13)" fg:x="3651" fg:w="4"/><text x="67.6489%" y="143.50"></text></g><g><title>bytes::bytes::static_drop (6 samples, 0.11%)</title><rect x="67.4728%" y="149" width="0.1108%" height="15" fill="rgb(244,185,38)" fg:x="3655" fg:w="6"/><text x="67.7228%" y="159.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (249 samples, 4.60%)</title><rect x="63.1900%" y="165" width="4.5966%" height="15" fill="rgb(236,202,9)" fg:x="3423" fg:w="249"/><text x="63.4400%" y="175.50">&lt;hype..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11 samples, 0.20%)</title><rect x="67.5835%" y="149" width="0.2031%" height="15" fill="rgb(250,229,37)" fg:x="3661" fg:w="11"/><text x="67.8335%" y="159.50"></text></g><g><title>hyper::common::date::CACHED::__getit (10 samples, 0.18%)</title><rect x="67.6020%" y="133" width="0.1846%" height="15" fill="rgb(206,174,23)" fg:x="3662" fg:w="10"/><text x="67.8520%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (11 samples, 0.20%)</title><rect x="67.7866%" y="165" width="0.2031%" height="15" fill="rgb(211,33,43)" fg:x="3672" fg:w="11"/><text x="68.0366%" y="175.50"></text></g><g><title>tracing::span::Span::log (3 samples, 0.06%)</title><rect x="67.9343%" y="149" width="0.0554%" height="15" fill="rgb(245,58,50)" fg:x="3680" fg:w="3"/><text x="68.1843%" y="159.50"></text></g><g><title>tracing_core::metadata::Metadata::level (1 samples, 0.02%)</title><rect x="67.9712%" y="133" width="0.0185%" height="15" fill="rgb(244,68,36)" fg:x="3682" fg:w="1"/><text x="68.2212%" y="143.50"></text></g><g><title>tracing::span::Span::log (7 samples, 0.13%)</title><rect x="67.9897%" y="165" width="0.1292%" height="15" fill="rgb(232,229,15)" fg:x="3683" fg:w="7"/><text x="68.2397%" y="175.50"></text></g><g><title>tracing_core::metadata::Metadata::level (1 samples, 0.02%)</title><rect x="68.1004%" y="149" width="0.0185%" height="15" fill="rgb(254,30,23)" fg:x="3689" fg:w="1"/><text x="68.3504%" y="159.50"></text></g><g><title>tracing::span::Span::log (6 samples, 0.11%)</title><rect x="68.3219%" y="149" width="0.1108%" height="15" fill="rgb(235,160,14)" fg:x="3701" fg:w="6"/><text x="68.5719%" y="159.50"></text></g><g><title>tracing_core::metadata::Metadata::level (1 samples, 0.02%)</title><rect x="68.4327%" y="149" width="0.0185%" height="15" fill="rgb(212,155,44)" fg:x="3707" fg:w="1"/><text x="68.6827%" y="159.50"></text></g><g><title>tracing_core::metadata::Metadata::name (3 samples, 0.06%)</title><rect x="68.4512%" y="149" width="0.0554%" height="15" fill="rgb(226,2,50)" fg:x="3708" fg:w="3"/><text x="68.7012%" y="159.50"></text></g><g><title>tracing_core::span::Record::is_empty (3 samples, 0.06%)</title><rect x="68.5066%" y="149" width="0.0554%" height="15" fill="rgb(234,177,6)" fg:x="3711" fg:w="3"/><text x="68.7566%" y="159.50"></text></g><g><title>tracing::span::Span::record_all (25 samples, 0.46%)</title><rect x="68.1189%" y="165" width="0.4615%" height="15" fill="rgb(217,24,9)" fg:x="3690" fg:w="25"/><text x="68.3689%" y="175.50"></text></g><g><title>tracing_core::span::Record::new (1 samples, 0.02%)</title><rect x="68.5619%" y="149" width="0.0185%" height="15" fill="rgb(220,13,46)" fg:x="3714" fg:w="1"/><text x="68.8119%" y="159.50"></text></g><g><title>tracing_core::metadata::Metadata::fields (2 samples, 0.04%)</title><rect x="68.5804%" y="165" width="0.0369%" height="15" fill="rgb(239,221,27)" fg:x="3715" fg:w="2"/><text x="68.8304%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (351 samples, 6.48%)</title><rect x="62.1746%" y="197" width="6.4796%" height="15" fill="rgb(222,198,25)" fg:x="3368" fg:w="351"/><text x="62.4246%" y="207.50">hyper::p..</text></g><g><title>hyper::proto::h1::role::encode_headers (318 samples, 5.87%)</title><rect x="62.7838%" y="181" width="5.8704%" height="15" fill="rgb(211,99,13)" fg:x="3401" fg:w="318"/><text x="63.0338%" y="191.50">hyper::..</text></g><g><title>tracing_core::metadata::Metadata::name (2 samples, 0.04%)</title><rect x="68.6173%" y="165" width="0.0369%" height="15" fill="rgb(232,111,31)" fg:x="3717" fg:w="2"/><text x="68.8673%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::is_server (2 samples, 0.04%)</title><rect x="69.0234%" y="165" width="0.0369%" height="15" fill="rgb(245,82,37)" fg:x="3739" fg:w="2"/><text x="69.2734%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::KA::idle (5 samples, 0.09%)</title><rect x="69.0604%" y="165" width="0.0923%" height="15" fill="rgb(227,149,46)" fg:x="3741" fg:w="5"/><text x="69.3104%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::KA::status (13 samples, 0.24%)</title><rect x="69.1527%" y="165" width="0.2400%" height="15" fill="rgb(218,36,50)" fg:x="3746" fg:w="13"/><text x="69.4027%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (35 samples, 0.65%)</title><rect x="68.8573%" y="181" width="0.6461%" height="15" fill="rgb(226,80,48)" fg:x="3730" fg:w="35"/><text x="69.1073%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::State::is_idle (6 samples, 0.11%)</title><rect x="69.3927%" y="165" width="0.1108%" height="15" fill="rgb(238,224,15)" fg:x="3759" fg:w="6"/><text x="69.6427%" y="175.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.07%)</title><rect x="70.3526%" y="165" width="0.0738%" height="15" fill="rgb(241,136,10)" fg:x="3811" fg:w="4"/><text x="70.6026%" y="175.50"></text></g><g><title>__pthread_disable_asynccancel (3 samples, 0.06%)</title><rect x="72.0140%" y="85" width="0.0554%" height="15" fill="rgb(208,32,45)" fg:x="3901" fg:w="3"/><text x="72.2640%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (54 samples, 1.00%)</title><rect x="71.1279%" y="133" width="0.9969%" height="15" fill="rgb(207,135,9)" fg:x="3853" fg:w="54"/><text x="71.3779%" y="143.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (44 samples, 0.81%)</title><rect x="71.3125%" y="117" width="0.8123%" height="15" fill="rgb(206,86,44)" fg:x="3863" fg:w="44"/><text x="71.5625%" y="127.50"></text></g><g><title>__libc_send (35 samples, 0.65%)</title><rect x="71.4787%" y="101" width="0.6461%" height="15" fill="rgb(245,177,15)" fg:x="3872" fg:w="35"/><text x="71.7287%" y="111.50"></text></g><g><title>__pthread_enable_asynccancel (3 samples, 0.06%)</title><rect x="72.0694%" y="85" width="0.0554%" height="15" fill="rgb(206,64,50)" fg:x="3904" fg:w="3"/><text x="72.3194%" y="95.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (101 samples, 1.86%)</title><rect x="70.4264%" y="165" width="1.8645%" height="15" fill="rgb(234,36,40)" fg:x="3815" fg:w="101"/><text x="70.6764%" y="175.50">&lt;..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (88 samples, 1.62%)</title><rect x="70.6664%" y="149" width="1.6245%" height="15" fill="rgb(213,64,8)" fg:x="3828" fg:w="88"/><text x="70.9164%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (9 samples, 0.17%)</title><rect x="72.1248%" y="133" width="0.1661%" height="15" fill="rgb(210,75,36)" fg:x="3907" fg:w="9"/><text x="72.3748%" y="143.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.04%)</title><rect x="72.2540%" y="117" width="0.0369%" height="15" fill="rgb(229,88,21)" fg:x="3914" fg:w="2"/><text x="72.5040%" y="127.50"></text></g><g><title>hyper::proto::h1::io::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt;::reset (2 samples, 0.04%)</title><rect x="72.2909%" y="165" width="0.0369%" height="15" fill="rgb(252,204,47)" fg:x="3916" fg:w="2"/><text x="72.5409%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (205 samples, 3.78%)</title><rect x="68.6542%" y="197" width="3.7844%" height="15" fill="rgb(208,77,27)" fg:x="3719" fg:w="205"/><text x="68.9042%" y="207.50">hype..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (159 samples, 2.94%)</title><rect x="69.5034%" y="181" width="2.9352%" height="15" fill="rgb(221,76,26)" fg:x="3765" fg:w="159"/><text x="69.7534%" y="191.50">hy..</text></g><g><title>hyper::server::tcp::addr_stream::_::&lt;impl hyper::server::tcp::addr_stream::AddrStream&gt;::project (6 samples, 0.11%)</title><rect x="72.3279%" y="165" width="0.1108%" height="15" fill="rgb(225,139,18)" fg:x="3918" fg:w="6"/><text x="72.5779%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::conn::KA as core::ops::bit::BitAndAssign&lt;bool&gt;&gt;::bitand_assign (12 samples, 0.22%)</title><rect x="73.1955%" y="181" width="0.2215%" height="15" fill="rgb(230,137,11)" fg:x="3965" fg:w="12"/><text x="73.4455%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::is_server (3 samples, 0.06%)</title><rect x="73.4170%" y="181" width="0.0554%" height="15" fill="rgb(212,28,1)" fg:x="3977" fg:w="3"/><text x="73.6670%" y="191.50"></text></g><g><title>__memcpy_ssse3 (18 samples, 0.33%)</title><rect x="73.4724%" y="181" width="0.3323%" height="15" fill="rgb(248,164,17)" fg:x="3980" fg:w="18"/><text x="73.7224%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::State::busy (16 samples, 0.30%)</title><rect x="73.8047%" y="181" width="0.2954%" height="15" fill="rgb(222,171,42)" fg:x="3998" fg:w="16"/><text x="74.0547%" y="191.50"></text></g><g><title>__memcpy_ssse3 (51 samples, 0.94%)</title><rect x="75.0046%" y="165" width="0.9415%" height="15" fill="rgb(243,84,45)" fg:x="4063" fg:w="51"/><text x="75.2546%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="76.2599%" y="149" width="0.0185%" height="15" fill="rgb(252,49,23)" fg:x="4131" fg:w="1"/><text x="76.5099%" y="159.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::from_slice (5 samples, 0.09%)</title><rect x="76.2784%" y="149" width="0.0923%" height="15" fill="rgb(215,19,7)" fg:x="4132" fg:w="5"/><text x="76.5284%" y="159.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::next (5 samples, 0.09%)</title><rect x="76.3707%" y="149" width="0.0923%" height="15" fill="rgb(238,81,41)" fg:x="4137" fg:w="5"/><text x="76.6207%" y="159.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::record (8 samples, 0.15%)</title><rect x="76.4630%" y="149" width="0.1477%" height="15" fill="rgb(210,199,37)" fg:x="4142" fg:w="8"/><text x="76.7130%" y="159.50"></text></g><g><title>hyper::server::tcp::addr_stream::_::&lt;impl hyper::server::tcp::addr_stream::AddrStream&gt;::project (4 samples, 0.07%)</title><rect x="76.6107%" y="149" width="0.0738%" height="15" fill="rgb(244,192,49)" fg:x="4150" fg:w="4"/><text x="76.8607%" y="159.50"></text></g><g><title>__pthread_disable_asynccancel (4 samples, 0.07%)</title><rect x="77.7737%" y="85" width="0.0738%" height="15" fill="rgb(226,211,11)" fg:x="4213" fg:w="4"/><text x="78.0237%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (46 samples, 0.85%)</title><rect x="77.0168%" y="133" width="0.8492%" height="15" fill="rgb(236,162,54)" fg:x="4172" fg:w="46"/><text x="77.2668%" y="143.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (41 samples, 0.76%)</title><rect x="77.1091%" y="117" width="0.7569%" height="15" fill="rgb(220,229,9)" fg:x="4177" fg:w="41"/><text x="77.3591%" y="127.50"></text></g><g><title>__libc_recv (31 samples, 0.57%)</title><rect x="77.2937%" y="101" width="0.5723%" height="15" fill="rgb(250,87,22)" fg:x="4187" fg:w="31"/><text x="77.5437%" y="111.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="77.8475%" y="85" width="0.0185%" height="15" fill="rgb(239,43,17)" fg:x="4217" fg:w="1"/><text x="78.0975%" y="95.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (84 samples, 1.55%)</title><rect x="76.6845%" y="149" width="1.5507%" height="15" fill="rgb(231,177,25)" fg:x="4154" fg:w="84"/><text x="76.9345%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (20 samples, 0.37%)</title><rect x="77.8660%" y="133" width="0.3692%" height="15" fill="rgb(219,179,1)" fg:x="4218" fg:w="20"/><text x="78.1160%" y="143.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (7 samples, 0.13%)</title><rect x="78.1060%" y="117" width="0.1292%" height="15" fill="rgb(238,219,53)" fg:x="4231" fg:w="7"/><text x="78.3560%" y="127.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (131 samples, 2.42%)</title><rect x="75.9461%" y="165" width="2.4183%" height="15" fill="rgb(232,167,36)" fg:x="4114" fg:w="131"/><text x="76.1961%" y="175.50">hy..</text></g><g><title>tokio::io::read_buf::slice_assume_init (7 samples, 0.13%)</title><rect x="78.2352%" y="149" width="0.1292%" height="15" fill="rgb(244,19,51)" fg:x="4238" fg:w="7"/><text x="78.4852%" y="159.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::max (9 samples, 0.17%)</title><rect x="78.3644%" y="165" width="0.1661%" height="15" fill="rgb(224,6,22)" fg:x="4245" fg:w="9"/><text x="78.6144%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (10 samples, 0.18%)</title><rect x="79.1213%" y="149" width="0.1846%" height="15" fill="rgb(224,145,5)" fg:x="4286" fg:w="10"/><text x="79.3713%" y="159.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="79.2874%" y="133" width="0.0185%" height="15" fill="rgb(234,130,49)" fg:x="4295" fg:w="1"/><text x="79.5374%" y="143.50"></text></g><g><title>tracing::span::Span::log (4 samples, 0.07%)</title><rect x="79.4905%" y="133" width="0.0738%" height="15" fill="rgb(254,6,2)" fg:x="4306" fg:w="4"/><text x="79.7405%" y="143.50"></text></g><g><title>tracing_core::metadata::Metadata::level (3 samples, 0.06%)</title><rect x="79.5090%" y="117" width="0.0554%" height="15" fill="rgb(208,96,46)" fg:x="4307" fg:w="3"/><text x="79.7590%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (16 samples, 0.30%)</title><rect x="79.3059%" y="149" width="0.2954%" height="15" fill="rgb(239,3,39)" fg:x="4296" fg:w="16"/><text x="79.5559%" y="159.50"></text></g><g><title>tracing_core::metadata::Metadata::name (2 samples, 0.04%)</title><rect x="79.5643%" y="133" width="0.0369%" height="15" fill="rgb(233,210,1)" fg:x="4310" fg:w="2"/><text x="79.8143%" y="143.50"></text></g><g><title>tracing::span::Span::log (15 samples, 0.28%)</title><rect x="79.6013%" y="149" width="0.2769%" height="15" fill="rgb(244,137,37)" fg:x="4312" fg:w="15"/><text x="79.8513%" y="159.50"></text></g><g><title>tracing_core::metadata::Metadata::level (2 samples, 0.04%)</title><rect x="79.8412%" y="133" width="0.0369%" height="15" fill="rgb(240,136,2)" fg:x="4325" fg:w="2"/><text x="80.0912%" y="143.50"></text></g><g><title>tracing::span::Span::log (6 samples, 0.11%)</title><rect x="80.2474%" y="133" width="0.1108%" height="15" fill="rgb(239,18,37)" fg:x="4347" fg:w="6"/><text x="80.4974%" y="143.50"></text></g><g><title>tracing_core::metadata::Metadata::level (1 samples, 0.02%)</title><rect x="80.3397%" y="117" width="0.0185%" height="15" fill="rgb(218,185,22)" fg:x="4352" fg:w="1"/><text x="80.5897%" y="127.50"></text></g><g><title>tracing_core::metadata::Metadata::level (5 samples, 0.09%)</title><rect x="80.3581%" y="133" width="0.0923%" height="15" fill="rgb(225,218,4)" fg:x="4353" fg:w="5"/><text x="80.6081%" y="143.50"></text></g><g><title>tracing_core::metadata::Metadata::name (2 samples, 0.04%)</title><rect x="80.4504%" y="133" width="0.0369%" height="15" fill="rgb(230,182,32)" fg:x="4358" fg:w="2"/><text x="80.7004%" y="143.50"></text></g><g><title>tracing::span::Span::record_all (38 samples, 0.70%)</title><rect x="79.8782%" y="149" width="0.7015%" height="15" fill="rgb(242,56,43)" fg:x="4327" fg:w="38"/><text x="80.1282%" y="159.50"></text></g><g><title>tracing_core::span::Record::new (5 samples, 0.09%)</title><rect x="80.4874%" y="133" width="0.0923%" height="15" fill="rgb(233,99,24)" fg:x="4360" fg:w="5"/><text x="80.7374%" y="143.50"></text></g><g><title>tracing_core::metadata::Metadata::fields (2 samples, 0.04%)</title><rect x="80.5797%" y="149" width="0.0369%" height="15" fill="rgb(234,209,42)" fg:x="4365" fg:w="2"/><text x="80.8297%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (448 samples, 8.27%)</title><rect x="72.4386%" y="197" width="8.2703%" height="15" fill="rgb(227,7,12)" fg:x="3924" fg:w="448"/><text x="72.6886%" y="207.50">hyper::proto..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (358 samples, 6.61%)</title><rect x="74.1001%" y="181" width="6.6088%" height="15" fill="rgb(245,203,43)" fg:x="4014" fg:w="358"/><text x="74.3501%" y="191.50">hyper::pr..</text></g><g><title>hyper::proto::h1::role::parse_headers (118 samples, 2.18%)</title><rect x="78.5306%" y="165" width="2.1783%" height="15" fill="rgb(238,205,33)" fg:x="4254" fg:w="118"/><text x="78.7806%" y="175.50">h..</text></g><g><title>tracing_core::metadata::Metadata::name (5 samples, 0.09%)</title><rect x="80.6166%" y="149" width="0.0923%" height="15" fill="rgb(231,56,7)" fg:x="4367" fg:w="5"/><text x="80.8666%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.04%)</title><rect x="81.0965%" y="149" width="0.0369%" height="15" fill="rgb(244,186,29)" fg:x="4393" fg:w="2"/><text x="81.3465%" y="159.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::from_slice (2 samples, 0.04%)</title><rect x="81.1335%" y="149" width="0.0369%" height="15" fill="rgb(234,111,31)" fg:x="4395" fg:w="2"/><text x="81.3835%" y="159.50"></text></g><g><title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="81.5027%" y="133" width="0.0185%" height="15" fill="rgb(241,149,10)" fg:x="4415" fg:w="1"/><text x="81.7527%" y="143.50"></text></g><g><title>__rdl_alloc (3 samples, 0.06%)</title><rect x="81.5211%" y="133" width="0.0554%" height="15" fill="rgb(249,206,44)" fg:x="4416" fg:w="3"/><text x="81.7711%" y="143.50"></text></g><g><title>__rust_alloc (5 samples, 0.09%)</title><rect x="81.5765%" y="133" width="0.0923%" height="15" fill="rgb(251,153,30)" fg:x="4419" fg:w="5"/><text x="81.8265%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (93 samples, 1.72%)</title><rect x="81.1704%" y="149" width="1.7168%" height="15" fill="rgb(239,152,38)" fg:x="4397" fg:w="93"/><text x="81.4204%" y="159.50"></text></g><g><title>malloc (66 samples, 1.22%)</title><rect x="81.6688%" y="133" width="1.2184%" height="15" fill="rgb(249,139,47)" fg:x="4424" fg:w="66"/><text x="81.9188%" y="143.50"></text></g><g><title>_int_malloc (50 samples, 0.92%)</title><rect x="81.9642%" y="117" width="0.9230%" height="15" fill="rgb(244,64,35)" fg:x="4440" fg:w="50"/><text x="82.2142%" y="127.50"></text></g><g><title>sysmalloc (2 samples, 0.04%)</title><rect x="82.8503%" y="101" width="0.0369%" height="15" fill="rgb(216,46,15)" fg:x="4488" fg:w="2"/><text x="83.1003%" y="111.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::next (2 samples, 0.04%)</title><rect x="82.8872%" y="149" width="0.0369%" height="15" fill="rgb(250,74,19)" fg:x="4490" fg:w="2"/><text x="83.1372%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (151 samples, 2.79%)</title><rect x="80.9119%" y="181" width="2.7875%" height="15" fill="rgb(249,42,33)" fg:x="4383" fg:w="151"/><text x="81.1619%" y="191.50">hy..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (147 samples, 2.71%)</title><rect x="80.9858%" y="165" width="2.7137%" height="15" fill="rgb(242,149,17)" fg:x="4387" fg:w="147"/><text x="81.2358%" y="175.50">hy..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (42 samples, 0.78%)</title><rect x="82.9241%" y="149" width="0.7753%" height="15" fill="rgb(244,29,21)" fg:x="4492" fg:w="42"/><text x="83.1741%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (38 samples, 0.70%)</title><rect x="82.9980%" y="133" width="0.7015%" height="15" fill="rgb(220,130,37)" fg:x="4496" fg:w="38"/><text x="83.2480%" y="143.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (27 samples, 0.50%)</title><rect x="83.2010%" y="117" width="0.4984%" height="15" fill="rgb(211,67,2)" fg:x="4507" fg:w="27"/><text x="83.4510%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (13 samples, 0.24%)</title><rect x="83.4595%" y="101" width="0.2400%" height="15" fill="rgb(235,68,52)" fg:x="4521" fg:w="13"/><text x="83.7095%" y="111.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (166 samples, 3.06%)</title><rect x="80.7089%" y="197" width="3.0644%" height="15" fill="rgb(246,142,3)" fg:x="4372" fg:w="166"/><text x="80.9589%" y="207.50">hyp..</text></g><g><title>hyper::proto::h1::conn::State::is_read_closed (4 samples, 0.07%)</title><rect x="83.6995%" y="181" width="0.0738%" height="15" fill="rgb(241,25,7)" fg:x="4534" fg:w="4"/><text x="83.9495%" y="191.50"></text></g><g><title>__memcpy_ssse3 (8 samples, 0.15%)</title><rect x="84.4933%" y="165" width="0.1477%" height="15" fill="rgb(242,119,39)" fg:x="4577" fg:w="8"/><text x="84.7433%" y="175.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="84.6409%" y="165" width="0.0369%" height="15" fill="rgb(241,98,45)" fg:x="4585" fg:w="2"/><text x="84.8909%" y="175.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="84.9548%" y="149" width="0.0369%" height="15" fill="rgb(254,28,30)" fg:x="4602" fg:w="2"/><text x="85.2048%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (19 samples, 0.35%)</title><rect x="84.6779%" y="165" width="0.3507%" height="15" fill="rgb(241,142,54)" fg:x="4587" fg:w="19"/><text x="84.9279%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="84.9917%" y="149" width="0.0369%" height="15" fill="rgb(222,85,15)" fg:x="4604" fg:w="2"/><text x="85.2417%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="85.0286%" y="165" width="0.0738%" height="15" fill="rgb(210,85,47)" fg:x="4606" fg:w="4"/><text x="85.2786%" y="175.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (81 samples, 1.50%)</title><rect x="83.7733%" y="197" width="1.4953%" height="15" fill="rgb(224,206,25)" fg:x="4538" fg:w="81"/><text x="84.0233%" y="207.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (62 samples, 1.14%)</title><rect x="84.1241%" y="181" width="1.1445%" height="15" fill="rgb(243,201,19)" fg:x="4557" fg:w="62"/><text x="84.3741%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt;::maybe_unshift (9 samples, 0.17%)</title><rect x="85.1025%" y="165" width="0.1661%" height="15" fill="rgb(236,59,4)" fg:x="4610" fg:w="9"/><text x="85.3525%" y="175.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (3,869 samples, 71.42%)</title><rect x="13.9930%" y="245" width="71.4233%" height="15" fill="rgb(254,179,45)" fg:x="758" fg:w="3869"/><text x="14.2430%" y="255.50">&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (3,854 samples, 71.15%)</title><rect x="14.2699%" y="229" width="71.1464%" height="15" fill="rgb(226,14,10)" fg:x="773" fg:w="3854"/><text x="14.5199%" y="239.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (3,757 samples, 69.36%)</title><rect x="16.0606%" y="213" width="69.3557%" height="15" fill="rgb(244,27,41)" fg:x="870" fg:w="3757"/><text x="16.3106%" y="223.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop</text></g><g><title>hyper::proto::h1::encode::Encoder::is_eof (8 samples, 0.15%)</title><rect x="85.2686%" y="197" width="0.1477%" height="15" fill="rgb(235,35,32)" fg:x="4619" fg:w="8"/><text x="85.5186%" y="207.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.30%)</title><rect x="85.4163%" y="245" width="0.2954%" height="15" fill="rgb(218,68,31)" fg:x="4627" fg:w="16"/><text x="85.6663%" y="255.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (5 samples, 0.09%)</title><rect x="85.7116%" y="245" width="0.0923%" height="15" fill="rgb(207,120,37)" fg:x="4643" fg:w="5"/><text x="85.9616%" y="255.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3,924 samples, 72.44%)</title><rect x="13.4392%" y="277" width="72.4386%" height="15" fill="rgb(227,98,0)" fg:x="728" fg:w="3924"/><text x="13.6892%" y="287.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,906 samples, 72.11%)</title><rect x="13.7715%" y="261" width="72.1063%" height="15" fill="rgb(207,7,3)" fg:x="746" fg:w="3906"/><text x="14.0215%" y="271.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (4 samples, 0.07%)</title><rect x="85.8040%" y="245" width="0.0738%" height="15" fill="rgb(206,98,19)" fg:x="4648" fg:w="4"/><text x="86.0540%" y="255.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (15 samples, 0.28%)</title><rect x="85.8778%" y="277" width="0.2769%" height="15" fill="rgb(217,5,26)" fg:x="4652" fg:w="15"/><text x="86.1278%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (3 samples, 0.06%)</title><rect x="86.1547%" y="277" width="0.0554%" height="15" fill="rgb(235,190,38)" fg:x="4667" fg:w="3"/><text x="86.4047%" y="287.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,976 samples, 73.40%)</title><rect x="12.9038%" y="293" width="73.3986%" height="15" fill="rgb(247,86,24)" fg:x="699" fg:w="3976"/><text x="13.1538%" y="303.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::waker::raw_waker (5 samples, 0.09%)</title><rect x="86.2101%" y="277" width="0.0923%" height="15" fill="rgb(205,101,16)" fg:x="4670" fg:w="5"/><text x="86.4601%" y="287.50"></text></g><g><title>__clone (4,679 samples, 86.38%)</title><rect x="0.0000%" y="501" width="86.3762%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="511.50">__clone</text></g><g><title>start_thread (4,679 samples, 86.38%)</title><rect x="0.0000%" y="485" width="86.3762%" height="15" fill="rgb(231,114,1)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="495.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4,679 samples, 86.38%)</title><rect x="0.0000%" y="469" width="86.3762%" height="15" fill="rgb(207,184,53)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="479.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4,679 samples, 86.38%)</title><rect x="0.0000%" y="453" width="86.3762%" height="15" fill="rgb(224,95,51)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,679 samples, 86.38%)</title><rect x="0.0000%" y="437" width="86.3762%" height="15" fill="rgb(212,188,45)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4,679 samples, 86.38%)</title><rect x="0.0000%" y="421" width="86.3762%" height="15" fill="rgb(223,154,38)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="431.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4,679 samples, 86.38%)</title><rect x="0.0000%" y="405" width="86.3762%" height="15" fill="rgb(251,22,52)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="415.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4,679 samples, 86.38%)</title><rect x="0.0000%" y="389" width="86.3762%" height="15" fill="rgb(229,209,22)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="399.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4,679 samples, 86.38%)</title><rect x="0.0000%" y="373" width="86.3762%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="383.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (4,679 samples, 86.38%)</title><rect x="0.0000%" y="357" width="86.3762%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="367.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (4,679 samples, 86.38%)</title><rect x="0.0000%" y="341" width="86.3762%" height="15" fill="rgb(240,179,47)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="351.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (4,679 samples, 86.38%)</title><rect x="0.0000%" y="325" width="86.3762%" height="15" fill="rgb(240,163,11)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="335.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4,049 samples, 74.75%)</title><rect x="11.6301%" y="309" width="74.7462%" height="15" fill="rgb(236,37,12)" fg:x="630" fg:w="4049"/><text x="11.8801%" y="319.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.07%)</title><rect x="86.3024%" y="293" width="0.0738%" height="15" fill="rgb(232,164,16)" fg:x="4675" fg:w="4"/><text x="86.5524%" y="303.50"></text></g><g><title>&lt;T as tower::util::boxed_clone::CloneService&lt;R&gt;&gt;::clone_box (1 samples, 0.02%)</title><rect x="86.8931%" y="165" width="0.0185%" height="15" fill="rgb(244,205,15)" fg:x="4707" fg:w="1"/><text x="87.1431%" y="175.50"></text></g><g><title>axum::routing::method_routing::MethodRouter&lt;S,B,E&gt;::call_with_state (43 samples, 0.79%)</title><rect x="86.3762%" y="181" width="0.7938%" height="15" fill="rgb(223,117,47)" fg:x="4679" fg:w="43"/><text x="86.6262%" y="191.50"></text></g><g><title>__memcpy_ssse3 (14 samples, 0.26%)</title><rect x="86.9116%" y="165" width="0.2584%" height="15" fill="rgb(244,107,35)" fg:x="4708" fg:w="14"/><text x="87.1616%" y="175.50"></text></g><g><title>start_thread (44 samples, 0.81%)</title><rect x="86.3762%" y="501" width="0.8123%" height="15" fill="rgb(205,140,8)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="511.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (44 samples, 0.81%)</title><rect x="86.3762%" y="485" width="0.8123%" height="15" fill="rgb(228,84,46)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (44 samples, 0.81%)</title><rect x="86.3762%" y="469" width="0.8123%" height="15" fill="rgb(254,188,9)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="479.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 0.81%)</title><rect x="86.3762%" y="453" width="0.8123%" height="15" fill="rgb(206,112,54)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="463.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (44 samples, 0.81%)</title><rect x="86.3762%" y="437" width="0.8123%" height="15" fill="rgb(216,84,49)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="447.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (44 samples, 0.81%)</title><rect x="86.3762%" y="421" width="0.8123%" height="15" fill="rgb(214,194,35)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (44 samples, 0.81%)</title><rect x="86.3762%" y="405" width="0.8123%" height="15" fill="rgb(249,28,3)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="415.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (44 samples, 0.81%)</title><rect x="86.3762%" y="389" width="0.8123%" height="15" fill="rgb(222,56,52)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (44 samples, 0.81%)</title><rect x="86.3762%" y="373" width="0.8123%" height="15" fill="rgb(245,217,50)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="383.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (44 samples, 0.81%)</title><rect x="86.3762%" y="357" width="0.8123%" height="15" fill="rgb(213,201,24)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (44 samples, 0.81%)</title><rect x="86.3762%" y="341" width="0.8123%" height="15" fill="rgb(248,116,28)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (44 samples, 0.81%)</title><rect x="86.3762%" y="325" width="0.8123%" height="15" fill="rgb(219,72,43)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (44 samples, 0.81%)</title><rect x="86.3762%" y="309" width="0.8123%" height="15" fill="rgb(209,138,14)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="319.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (44 samples, 0.81%)</title><rect x="86.3762%" y="293" width="0.8123%" height="15" fill="rgb(222,18,33)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="303.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (44 samples, 0.81%)</title><rect x="86.3762%" y="277" width="0.8123%" height="15" fill="rgb(213,199,7)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="287.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (44 samples, 0.81%)</title><rect x="86.3762%" y="261" width="0.8123%" height="15" fill="rgb(250,110,10)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="271.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (44 samples, 0.81%)</title><rect x="86.3762%" y="245" width="0.8123%" height="15" fill="rgb(248,123,6)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="255.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (44 samples, 0.81%)</title><rect x="86.3762%" y="229" width="0.8123%" height="15" fill="rgb(206,91,31)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="239.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (44 samples, 0.81%)</title><rect x="86.3762%" y="213" width="0.8123%" height="15" fill="rgb(211,154,13)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="223.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (44 samples, 0.81%)</title><rect x="86.3762%" y="197" width="0.8123%" height="15" fill="rgb(225,148,7)" fg:x="4679" fg:w="44"/><text x="86.6262%" y="207.50"></text></g><g><title>axum::routing::url_params::insert_url_params (1 samples, 0.02%)</title><rect x="87.1700%" y="181" width="0.0185%" height="15" fill="rgb(220,160,43)" fg:x="4722" fg:w="1"/><text x="87.4200%" y="191.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="87.1700%" y="165" width="0.0185%" height="15" fill="rgb(213,52,39)" fg:x="4722" fg:w="1"/><text x="87.4200%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="87.1700%" y="149" width="0.0185%" height="15" fill="rgb(243,137,7)" fg:x="4722" fg:w="1"/><text x="87.4200%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="87.1700%" y="133" width="0.0185%" height="15" fill="rgb(230,79,13)" fg:x="4722" fg:w="1"/><text x="87.4200%" y="143.50"></text></g><g><title>&lt;matchit::params::ParamsIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="87.1700%" y="117" width="0.0185%" height="15" fill="rgb(247,105,23)" fg:x="4722" fg:w="1"/><text x="87.4200%" y="127.50"></text></g><g><title>&lt;http::method::Inner as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="89.5883%" y="373" width="0.1292%" height="15" fill="rgb(223,179,41)" fg:x="4853" fg:w="7"/><text x="89.8383%" y="383.50"></text></g><g><title>__memcpy_ssse3 (21 samples, 0.39%)</title><rect x="89.7176%" y="373" width="0.3877%" height="15" fill="rgb(218,9,34)" fg:x="4860" fg:w="21"/><text x="89.9676%" y="383.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="90.1052%" y="373" width="0.0185%" height="15" fill="rgb(222,106,8)" fg:x="4881" fg:w="1"/><text x="90.3552%" y="383.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (17 samples, 0.31%)</title><rect x="90.1975%" y="357" width="0.3138%" height="15" fill="rgb(211,220,0)" fg:x="4886" fg:w="17"/><text x="90.4475%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.04%)</title><rect x="90.4744%" y="341" width="0.0369%" height="15" fill="rgb(229,52,16)" fg:x="4901" fg:w="2"/><text x="90.7244%" y="351.50"></text></g><g><title>__memcpy_ssse3 (2 samples, 0.04%)</title><rect x="90.5114%" y="357" width="0.0369%" height="15" fill="rgb(212,155,18)" fg:x="4903" fg:w="2"/><text x="90.7614%" y="367.50"></text></g><g><title>__rdl_alloc (8 samples, 0.15%)</title><rect x="90.5483%" y="357" width="0.1477%" height="15" fill="rgb(242,21,14)" fg:x="4905" fg:w="8"/><text x="90.7983%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="90.6960%" y="357" width="0.0185%" height="15" fill="rgb(222,19,48)" fg:x="4913" fg:w="1"/><text x="90.9460%" y="367.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (66 samples, 1.22%)</title><rect x="90.1237%" y="373" width="1.2184%" height="15" fill="rgb(232,45,27)" fg:x="4882" fg:w="66"/><text x="90.3737%" y="383.50"></text></g><g><title>malloc (34 samples, 0.63%)</title><rect x="90.7144%" y="357" width="0.6277%" height="15" fill="rgb(249,103,42)" fg:x="4914" fg:w="34"/><text x="90.9644%" y="367.50"></text></g><g><title>bytes::bytes::Bytes::slice (32 samples, 0.59%)</title><rect x="91.3421%" y="373" width="0.5907%" height="15" fill="rgb(246,81,33)" fg:x="4948" fg:w="32"/><text x="91.5921%" y="383.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (15 samples, 0.28%)</title><rect x="91.6559%" y="357" width="0.2769%" height="15" fill="rgb(252,33,42)" fg:x="4965" fg:w="15"/><text x="91.9059%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (6 samples, 0.11%)</title><rect x="91.9328%" y="373" width="0.1108%" height="15" fill="rgb(209,212,41)" fg:x="4980" fg:w="6"/><text x="92.1828%" y="383.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="92.2466%" y="357" width="0.0369%" height="15" fill="rgb(207,154,6)" fg:x="4997" fg:w="2"/><text x="92.4966%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (9 samples, 0.17%)</title><rect x="92.2836%" y="357" width="0.1661%" height="15" fill="rgb(223,64,47)" fg:x="4999" fg:w="9"/><text x="92.5336%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (24 samples, 0.44%)</title><rect x="92.0436%" y="373" width="0.4430%" height="15" fill="rgb(211,161,38)" fg:x="4986" fg:w="24"/><text x="92.2936%" y="383.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="92.4497%" y="357" width="0.0369%" height="15" fill="rgb(219,138,40)" fg:x="5008" fg:w="2"/><text x="92.6997%" y="367.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (10 samples, 0.18%)</title><rect x="92.4866%" y="373" width="0.1846%" height="15" fill="rgb(241,228,46)" fg:x="5010" fg:w="10"/><text x="92.7366%" y="383.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (17 samples, 0.31%)</title><rect x="93.5573%" y="357" width="0.3138%" height="15" fill="rgb(223,209,38)" fg:x="5068" fg:w="17"/><text x="93.8073%" y="367.50"></text></g><g><title>http::header::map::Danger::is_yellow (8 samples, 0.15%)</title><rect x="93.7235%" y="341" width="0.1477%" height="15" fill="rgb(236,164,45)" fg:x="5077" fg:w="8"/><text x="93.9735%" y="351.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append (76 samples, 1.40%)</title><rect x="92.6712%" y="373" width="1.4030%" height="15" fill="rgb(231,15,5)" fg:x="5020" fg:w="76"/><text x="92.9212%" y="383.50"></text></g><g><title>http::header::map::hash_elem_using (11 samples, 0.20%)</title><rect x="93.8711%" y="357" width="0.2031%" height="15" fill="rgb(252,35,15)" fg:x="5085" fg:w="11"/><text x="94.1211%" y="367.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve (5 samples, 0.09%)</title><rect x="94.0742%" y="373" width="0.0923%" height="15" fill="rgb(248,181,18)" fg:x="5096" fg:w="5"/><text x="94.3242%" y="383.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (49 samples, 0.90%)</title><rect x="94.1665%" y="373" width="0.9046%" height="15" fill="rgb(233,39,42)" fg:x="5101" fg:w="49"/><text x="94.4165%" y="383.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (28 samples, 0.52%)</title><rect x="94.5542%" y="357" width="0.5169%" height="15" fill="rgb(238,110,33)" fg:x="5122" fg:w="28"/><text x="94.8042%" y="367.50"></text></g><g><title>http::method::Method::from_bytes (7 samples, 0.13%)</title><rect x="95.0711%" y="373" width="0.1292%" height="15" fill="rgb(233,195,10)" fg:x="5150" fg:w="7"/><text x="95.3211%" y="383.50"></text></g><g><title>http::uri::Uri::from_shared (42 samples, 0.78%)</title><rect x="95.2003%" y="373" width="0.7753%" height="15" fill="rgb(254,105,3)" fg:x="5157" fg:w="42"/><text x="95.4503%" y="383.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (30 samples, 0.55%)</title><rect x="95.4218%" y="357" width="0.5538%" height="15" fill="rgb(221,225,9)" fg:x="5169" fg:w="30"/><text x="95.6718%" y="367.50"></text></g><g><title>core::core_arch::x86_64::bmi::_tzcnt_u64 (1 samples, 0.02%)</title><rect x="98.9662%" y="309" width="0.0185%" height="15" fill="rgb(224,227,45)" fg:x="5361" fg:w="1"/><text x="99.2162%" y="319.50"></text></g><g><title>httparse::simd::avx2::match_header_value_char_32_avx (6 samples, 0.11%)</title><rect x="98.9847%" y="309" width="0.1108%" height="15" fill="rgb(229,198,43)" fg:x="5362" fg:w="6"/><text x="99.2347%" y="319.50"></text></g><g><title>httparse::parse_headers_iter_uninit (120 samples, 2.22%)</title><rect x="96.9540%" y="341" width="2.2152%" height="15" fill="rgb(206,209,35)" fg:x="5252" fg:w="120"/><text x="97.2040%" y="351.50">h..</text></g><g><title>httparse::simd::runtime::match_header_value_vectored (25 samples, 0.46%)</title><rect x="98.7078%" y="325" width="0.4615%" height="15" fill="rgb(245,195,53)" fg:x="5347" fg:w="25"/><text x="98.9578%" y="335.50"></text></g><g><title>httparse::simd::sse42::match_header_value_char_16_sse (4 samples, 0.07%)</title><rect x="99.0954%" y="309" width="0.0738%" height="15" fill="rgb(240,92,26)" fg:x="5368" fg:w="4"/><text x="99.3454%" y="319.50"></text></g><g><title>httparse::parse_version (8 samples, 0.15%)</title><rect x="99.1693%" y="341" width="0.1477%" height="15" fill="rgb(207,40,23)" fg:x="5372" fg:w="8"/><text x="99.4193%" y="351.50"></text></g><g><title>core::core_arch::x86_64::bmi::_tzcnt_u64 (3 samples, 0.06%)</title><rect x="99.4462%" y="325" width="0.0554%" height="15" fill="rgb(223,111,35)" fg:x="5387" fg:w="3"/><text x="99.6962%" y="335.50"></text></g><g><title>httparse::Request::parse_with_uninit_headers (203 samples, 3.75%)</title><rect x="95.9756%" y="373" width="3.7475%" height="15" fill="rgb(229,147,28)" fg:x="5199" fg:w="203"/><text x="96.2256%" y="383.50">http..</text></g><g><title>httparse::Request::parse_with_config_and_uninit_headers (196 samples, 3.62%)</title><rect x="96.1049%" y="357" width="3.6182%" height="15" fill="rgb(211,29,28)" fg:x="5206" fg:w="196"/><text x="96.3549%" y="367.50">http..</text></g><g><title>httparse::simd::runtime::match_uri_vectored (22 samples, 0.41%)</title><rect x="99.3170%" y="341" width="0.4061%" height="15" fill="rgb(228,72,33)" fg:x="5380" fg:w="22"/><text x="99.5670%" y="351.50"></text></g><g><title>httparse::simd::avx2::match_url_char_32_avx (12 samples, 0.22%)</title><rect x="99.5016%" y="325" width="0.2215%" height="15" fill="rgb(205,214,31)" fg:x="5390" fg:w="12"/><text x="99.7516%" y="335.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (691 samples, 12.76%)</title><rect x="87.1885%" y="501" width="12.7561%" height="15" fill="rgb(224,111,15)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="511.50">tokio::loom::std::u..</text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (691 samples, 12.76%)</title><rect x="87.1885%" y="485" width="12.7561%" height="15" fill="rgb(253,21,26)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="495.50">&lt;hyper::server::con..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (691 samples, 12.76%)</title><rect x="87.1885%" y="469" width="12.7561%" height="15" fill="rgb(245,139,43)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="479.50">hyper::proto::h1::d..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (691 samples, 12.76%)</title><rect x="87.1885%" y="453" width="12.7561%" height="15" fill="rgb(252,170,7)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="463.50">hyper::proto::h1::d..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (691 samples, 12.76%)</title><rect x="87.1885%" y="437" width="12.7561%" height="15" fill="rgb(231,118,14)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="447.50">hyper::proto::h1::c..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (691 samples, 12.76%)</title><rect x="87.1885%" y="421" width="12.7561%" height="15" fill="rgb(238,83,0)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="431.50">hyper::proto::h1::i..</text></g><g><title>hyper::proto::h1::role::parse_headers (691 samples, 12.76%)</title><rect x="87.1885%" y="405" width="12.7561%" height="15" fill="rgb(221,39,39)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="415.50">hyper::proto::h1::r..</text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (691 samples, 12.76%)</title><rect x="87.1885%" y="389" width="12.7561%" height="15" fill="rgb(222,119,46)" fg:x="4723" fg:w="691"/><text x="87.4385%" y="399.50">&lt;hyper::proto::h1::..</text></g><g><title>hyper::proto::h1::role::record_header_indices (12 samples, 0.22%)</title><rect x="99.7231%" y="373" width="0.2215%" height="15" fill="rgb(222,165,49)" fg:x="5402" fg:w="12"/><text x="99.9731%" y="383.50"></text></g><g><title>all (5,417 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="5417"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio-runtime-w (5,417 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(214,7,15)" fg:x="0" fg:w="5417"/><text x="0.2500%" y="527.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.06%)</title><rect x="99.9446%" y="501" width="0.0554%" height="15" fill="rgb(235,32,4)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="511.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 0.06%)</title><rect x="99.9446%" y="485" width="0.0554%" height="15" fill="rgb(238,90,54)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="495.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (3 samples, 0.06%)</title><rect x="99.9446%" y="469" width="0.0554%" height="15" fill="rgb(213,208,19)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="479.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (3 samples, 0.06%)</title><rect x="99.9446%" y="453" width="0.0554%" height="15" fill="rgb(233,156,4)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="463.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (3 samples, 0.06%)</title><rect x="99.9446%" y="437" width="0.0554%" height="15" fill="rgb(207,194,5)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="447.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (3 samples, 0.06%)</title><rect x="99.9446%" y="421" width="0.0554%" height="15" fill="rgb(206,111,30)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="431.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (3 samples, 0.06%)</title><rect x="99.9446%" y="405" width="0.0554%" height="15" fill="rgb(243,70,54)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="415.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (3 samples, 0.06%)</title><rect x="99.9446%" y="389" width="0.0554%" height="15" fill="rgb(242,28,8)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="399.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (3 samples, 0.06%)</title><rect x="99.9446%" y="373" width="0.0554%" height="15" fill="rgb(219,106,18)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="383.50"></text></g><g><title>__rust_probestack (3 samples, 0.06%)</title><rect x="99.9446%" y="357" width="0.0554%" height="15" fill="rgb(244,222,10)" fg:x="5414" fg:w="3"/><text x="100.1946%" y="367.50"></text></g></svg></svg>